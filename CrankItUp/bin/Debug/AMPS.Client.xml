<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AMPS.Client</name>
    </assembly>
    <members>
        <member name="M:AMPS.Client.Authenticator.authenticate(System.String,System.String)">
            <summary>
            Called by AMPS.Client, just before the logon command is seny.
            </summary>
            <param name="username_">The current value of the username as specified in the URI.</param>
            <param name="currentPassword_">The current value of the password, as specified in the URI.</param>
            <returns>The value that should be placed into the Password header field of the logon command</returns>
        </member>
        <member name="M:AMPS.Client.Authenticator.retry(System.String,System.String)">
            <summary>
            Called when a logon "ack" is received with a status of "retry".
            </summary>
            <remarks>
            AMPS will continue trying to logon as long as the server returns "retry", 
            and this method continues to succeed.
            </remarks>
            <param name="username_">The username returned by the server's ACK message.</param>
            <param name="password_">The password or token returned in the server's ACK message.</param>
            <returns>The value that should be placed into the Password header for the next logon attempt.</returns>
        </member>
        <member name="M:AMPS.Client.Authenticator.completed(System.String,System.String,AMPS.Client.Message.Reasons)">
            <summary>
            Called when a logon completes successfully.
            </summary>
            <remarks>
            Once a logon has completed, this method is called with the username and password
            that caused a successful logon.
            </remarks>
            <param name="username_">The username that successfully logged on to the server.</param>
            <param name="password_">The password that successfully logged on to the server.</param>
            <param name="reason_">The reason reported for success by the server.</param>
        </member>
        <member name="T:AMPS.Client.Store">
             Represents a message store. The AMPS client uses message stores for
             recovery purposes. The store is responsible for maintaining the state
             of published messages and recovering that state in the event of a
             disconnection. Optionally, the store may persist message state and
             recover that state if the application restarts.
            
        </member>
        <member name="M:AMPS.Client.Store.store(AMPS.Client.Message)">
            Store the provided message. The message sequence is the key
            the client can later use to replay the operation or remove the
            operation from the store. Implementations may assume that the index
            increases monotonically.
            <param name="message">The message to store.</param>
        </member>
        <member name="M:AMPS.Client.Store.discardUpTo(System.UInt64)">
            Discard all operations up to the index provided.
            <param name="index">the sequence number to keep -- all previous sequence numbers will be discarded</param>
        </member>
        <member name="M:AMPS.Client.Store.replay(AMPS.Client.StoreReplayer)">
            Replay all operations in the store using the provided StoreReplayer.
            <param name="replayer">the StoreReplayer to use to replay the operation</param>
        </member>
        <member name="M:AMPS.Client.Store.replaySingle(AMPS.Client.StoreReplayer,System.UInt64)">
            Replay the operation at the specified sequence.
        </member>
        <member name="M:AMPS.Client.Store.unpersistedCount">
            Return the number of operations in the store.
        </member>
        <member name="M:AMPS.Client.Store.getLastPersisted">
            Return the sequence of the last persisted message.
        </member>
        <member name="M:AMPS.Client.Store.flush">
            Wait for the store to discard everything that has been stored up
            to the point in time when flush is called, then return.
        </member>
        <member name="M:AMPS.Client.Store.flush(System.Int32)">
            Wait for the store to discard everything that has been stored up
            to the point in time when flush is called, then return. Throw an
            exception if this is not completed in the number of milliseconds
            specified by the timeout.
            <param name="timeout">the number of milliseconds to wait for the flush</param>
        </member>
        <member name="M:AMPS.Client.Store.setMessage(AMPS.Client.Message)">
            Set the Message that the Store will use for replay.
        </member>
        <member name="M:AMPS.Client.Store.setResizeHandler(AMPS.Client.PublishStoreResizeHandler)">
            Set the resize handler for the publish store. An implementation can
            call the resize handler in the event that it needs to grow the
            size of the publish store.
        </member>
        <member name="M:AMPS.Client.BlockPublishStore.replayOnto(AMPS.Client.BlockPublishStore.Block,AMPS.Client.StoreReplayer)">
            Replays a single message onto a store replayer.
            @param b  The first block of the message.
            @param replayer  The replayer to play this message on
            @param readArray  Can be null.  We try to re-use this array if possible for reading, instead of allocating anew.
            @throws IOException
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.#ctor">
            Initializes the underlying array, and sets
            the "last discarded" value to something reasonable.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.capacity">
            Size of underlying array
            @return current capacity of self.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.getByIndex(System.Int64)">
            Retrieves an Entry given an index
            @param index An index returned by .getIndex(), getStartIndex(),
                         getEndIndex(), log, etc.
            @return The entry at that index, or null if not found.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.getLastDiscarded">
            Returns the "last discarded" bookmark. This may be a
            newer bookmark than the one you last passed to discard(),
            if you're discarding out of order.
            
            @return the last bookmark to be discarded.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.isEmpty">
            Returns if the buffer is currently empty.
            
            @return true if self is empty and false otherwise.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.getStartIndex">
            Returns the index value associated with the first valid
            Entry in self. 
            @return index of first valid entry.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.getEndIndex">
            Returns the index value one greater than the last valid
            Entry in self.
            @return index 1 greater than last valid entry.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.log(AMPS.Client.Fields.BookmarkField)">
            Logs the bookmark by allocating an Entry, setting
            the Entry to active, copying the bookmark value
            to that entry, and returning the index
            of that entry.
            @param bookmark the bookmark to loc
            @return the index of the new Entry.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.relog(System.Int64,AMPS.Client.Fields.BookmarkField)">
            Re-logs the bookmark by copying an Entry to a new location
            and returning the index
            of that new location.
            @param bookmark the index to move
            @return the index of the new Entry.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.discard(System.Int64)">
            Discards an entry by index. If the discard is completed,
            lastDiscarded will change, otherwise the discard is cached
            in the entry, and the getLastDiscarded() value is unchanged.
            
            @param index the index of the entry.
            @return true if this caused lastDiscarded to change.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.find(AMPS.Client.Fields.BookmarkField)">
            Searches valid Entrys for the given bookmark
            @param field the bookmark to search for
            @return the Entry containing the given bookmark, or null.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.persisted(AMPS.Client.Fields.BookmarkField)">
            Mark all records up to the and including the provided bookmark as safe for discard and discard all appropriate bookmarks.
            @param bookmark The latest bookmark that can be safely disposed.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.noPersistedAcks">
            Called to indicate that the server won't provide persisted acks for the bookmarks
            so anything that is discarded should be assumed persisted.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.setPersistedAcks">
            Called to indicate that the server will provide persisted acks for the bookmarks.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.persistedAcks">
            Called to see if persisted acks are expected.
        </member>
        <member name="M:AMPS.Client.BookmarkRingBuffer.resize">
            Called when self is full, assumes all entries are valid.
        </member>
        <member name="T:AMPS.Client.BookmarkRingBuffer.Entry">
             Represents a single entry in an array of bookmarks
             
            
        </member>
        <member name="M:AMPS.Client.BookmarkStore.log(AMPS.Client.Message)">
            Log a bookmark to the persistent log.
            @return the corresponding bookmark sequence number
                    for this bookmark
        </member>
        <member name="M:AMPS.Client.BookmarkStore.discard(AMPS.Client.Fields.Field,System.Int64)">
            Log a discard-bookmark entry to the persistent log
            based on a bookmark sequence number.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.discard(AMPS.Client.Message)">
            Log a discard-bookmark entry to the persistent log
            based on a Message.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.getMostRecent(AMPS.Client.Fields.Field)">
            Returns the most recent bookmark from the log that
            ought to be used for (re-)subscriptions.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.isDiscarded(AMPS.Client.Message)">
            Called for each arriving message to determine if
            the application has already seen this bookmark and should
            not be reprocessed.  Returns 'true' if the bookmark is
            in the log and should not be re-processed, false otherwise.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.purge">
            Called to purge the contents of this store.
            Removes any tracking history associated with publishers and received
            messages, and may delete or truncate on-disk representations as well.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.setResizeHandler(AMPS.Client.BookmarkStoreResizeHandler)">
            Called to set a resize handler that is invoked when the store needs to resize.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.getOldestBookmarkSeq(AMPS.Client.Fields.Field)">
            Called to retrieve the sequence number of the oldest bookmark in the store.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.persisted(AMPS.Client.Fields.Field,AMPS.Client.Fields.BookmarkField)">
                    * Called to mark a message as safely persisted by AMPS to all of its sync
                   * replication destination.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.persisted(AMPS.Client.Fields.Field,System.Int64)">
            Called to mark a message as safely persisted by AMPS to all of its sync
            replication destination.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.noPersistedAcks(AMPS.Client.Fields.Field)">
            Called internally to let the bookmark store know that the AMPS server
            version doesn't support persisted acks for bookmarks.
        </member>
        <member name="M:AMPS.Client.BookmarkStore.setServerVersion(System.Int32)">
            Called to set the version of the server used with this store.
        </member>
        <member name="M:AMPS.Client.BookmarkStoreResizeHandler.invoke(AMPS.Client.BookmarkStore,AMPS.Client.Fields.Field,System.Int64)">
            <summary>
            Invokes a BookmarkStore resize handler.
            </summary>
            <param name="store">Handles all operations for a bookmark.</param>
            <param name="subId">A single field in an AMPS message.</param>
            <param name="store">Size of the field.</param>
        </member>
        <member name="T:AMPS.Client.ActionDisconnectHandler">
            <summary>
            Allows the use of an Action (i.e. lambda function with no return value) in
            any context where a ClientDisconnectHandler may be used.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AMPS.Client.Command" -->
        <member name="M:AMPS.Client.Command.getSOWKeys">
            <returns>the SOW Keys</returns>
        </member>
        <member name="M:AMPS.Client.Command.getSowKeys">
            <returns>the SOW Keys</returns>
        </member>
        <member name="M:AMPS.Client.Command.setSOWKeys(System.String)">
             <summary> The SowKeys for a command are a comma-separated list
            of the keys that AMPS assigns to SOW messages. The SOW key for a
            message is available through the {@link Message#getSowKeys} method
            on a message. </summary>
            
             <param name="sowKeys"> the sow keys to set</param>
        </member>
        <member name="M:AMPS.Client.Command.setSowKeys(System.String)">
             <summary> The SowKeys for a command are a comma-separated list
            of the keys that AMPS assigns to SOW messages. The SOW key for a
            message is available through the {@link Message#getSowKeys} method
            on a message. </summary>
            
             <param name="sowKeys"> the sow keys to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getSOWKey">
            <returns>the SOW Key</returns>
        </member>
        <member name="M:AMPS.Client.Command.getSowKey">
            <returns>the SOW Key</returns>
        </member>
        <member name="M:AMPS.Client.Command.setSOWKey(System.String)">
             <summary> The SowKey for a command are a comma-separated list
            of the keys that AMPS assigns to SOW messages. The SOW key for a
            message is available through the {@link Message#getSowKey} method
            on a message. </summary>
            
             <param name="sowKey"> the sow keys to set</param>
        </member>
        <member name="M:AMPS.Client.Command.setSowKey(System.String)">
             <summary> The SowKey for a command are a comma-separated list
            of the keys that AMPS assigns to SOW messages. The SOW key for a
            message is available through the {@link Message#getSowKey} method
            on a message. </summary>
            
             <param name="sowKey"> the sow keys to set</param>
        </member>
        <member name="M:AMPS.Client.Command.isSubscribe">
            <returns> true if this command is a subscription</returns>
        </member>
        <member name="M:AMPS.Client.Command.isSow">
            <returns>true if this command is a sow query</returns>
        </member>
        <member name="M:AMPS.Client.Command.needsSequenceNumber">
            <returns> true if this command can be associated with a client sequence number.</returns>
        </member>
        <member name="M:AMPS.Client.Command.#ctor">
            <summary>
            Create a new Command with no command type or arguments set.
            </summary>
        </member>
        <member name="M:AMPS.Client.Command.#ctor(AMPS.Client.Message.Commands)">
            <summary>
            Create a Command with the Command field set.</summary>
            <param name="command_"> A {@link Message.Commands} value indicating the AMPS command.</param>
        </member>
        <member name="M:AMPS.Client.Command.#ctor(System.String)">
            <summary>
            Create a Command with the Command field set.</summary>
            <param name="command_"> A string indicating the AMPS command.</param>
        </member>
        <member name="M:AMPS.Client.Command.reset(AMPS.Client.Message.Commands)">
            <summary>
            Resets this command with a new Command type and re-initializes all other fields.</summary>
            <param name="command_"> A {@link Message.Commands} value indicating the AMPS command.</param>
        </member>
        <member name="M:AMPS.Client.Command.reset(System.String)">
            <summary>
            Resets this command with a new Command type and re-initializes all other fields.</summary>
            <param name="command_"> A string value indicating the AMPS command.</param>
        </member>
        <member name="M:AMPS.Client.Command.getCommandId">
            <returns> the commandId, which is automatically generated for some command types.</returns>
        </member>
        <member name="M:AMPS.Client.Command.setCommandId(AMPS.Client.CommandId)">
            <param name="commandId"> the commandId to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getQueryId">
            <returns> the queryId</returns>
        </member>
        <member name="M:AMPS.Client.Command.setQueryId(AMPS.Client.CommandId)">
            <param name="queryId"> the queryId to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getCommand">
            <returns> the command </returns>
        </member>
        <member name="M:AMPS.Client.Command.setCommand(AMPS.Client.Message.Commands)">
            <param name="command"> the command to set </param>
        </member>
        <member name="M:AMPS.Client.Command.getTopic">
            <returns> the topic</returns>
        </member>
        <member name="M:AMPS.Client.Command.setTopic(System.String)">
            <param name="topic"> the topic to set</param>
        </member>
        <member name="M:AMPS.Client.Command.setTopic(System.Byte[],System.Int32,System.Int32)">
            <param name="topic"> The raw bytes to be used for the topic. </param>
            <param name="offset"> The offset into topic where the topic data begins</param>
            <param name="length"> The length of the topic.</param>
        </member>
        <member name="M:AMPS.Client.Command.getFilter">
            <returns> the filter</returns>
        </member>
        <member name="M:AMPS.Client.Command.setFilter(System.String)">
            <param name="filter"> the filter to set </param>
        </member>
        <member name="M:AMPS.Client.Command.getOrderBy">
            <returns> the orderBy</returns>
        </member>
        <member name="M:AMPS.Client.Command.setOrderBy(System.String)">
            <param name="orderBy"> the orderBy to set </param>
        </member>
        <member name="M:AMPS.Client.Command.getSubId">
            <returns> the subId</returns>
        </member>
        <member name="M:AMPS.Client.Command.setSubId(AMPS.Client.CommandId)">
            <param name="subId"> the subId to set</param>
        </member>
        <member name="M:AMPS.Client.Command.setSubId(System.String)">
            <param name="subId"> the subId to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getBookmark">
            <returns> the bookmark</returns>
        </member>
        <member name="M:AMPS.Client.Command.setBookmark(System.String)">
            <param name="bookmark"> the bookmark to set </param>
        </member>
        <member name="M:AMPS.Client.Command.getOptions">
            <returns> the options</returns>
        </member>
        <member name="M:AMPS.Client.Command.setOptions(System.String)">
            <param name="options"> the options to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getAckType">
            <returns> the ackType</returns>
        </member>
        <member name="M:AMPS.Client.Command.setAckType(AMPS.Client.Message.AckTypes)">
            <param name="ackType"> the ackType to set </param>
        </member>
        <member name="M:AMPS.Client.Command.addAckType(AMPS.Client.Message.AckTypes)">
            <summary>
            Adds an additional ackType to the ackTypes already set
            for this Command.
            </summary>
            <param name="ackType"> the ackType to add </param>
        </member>
        <member name="M:AMPS.Client.Command.getData">
            <returns> the data</returns>
        </member>
        <member name="M:AMPS.Client.Command.setData(System.String)">
            <param name="data"> the data to set </param>
        </member>
        <member name="M:AMPS.Client.Command.setData(System.Byte[],System.Int32,System.Int32)">
            <param name="data"> The raw bytes to be used for the data.</param>
            <param name="offset"> The offset into data where the data begins.</param>
            <param name="length"> The length of the data.</param>
        </member>
        <member name="M:AMPS.Client.Command.setData(AMPS.Client.CompositeMessageBuilder)">
            
             <summary>
             Set the data for this command.
             </summary>
             <param name="builder">A CompositeMessageBuilder to set self's data from.</param>
            
        </member>
        <member name="M:AMPS.Client.Command.getTimeout">
            <returns> the timeout</returns>
        </member>
        <member name="M:AMPS.Client.Command.setTimeout(System.Int64)">
            <param name="timeout"> the timeout to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getTopN">
            <returns> the topN</returns>
        </member>
        <member name="M:AMPS.Client.Command.setTopN(System.Int32)">
            <param name="topN"> the topN to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getBatchSize">
            <returns> the batchSize</returns>
        </member>
        <member name="M:AMPS.Client.Command.setBatchSize(System.Int32)">
            <param name="batchSize"> the batchSize to set</param>
        </member>
        <member name="M:AMPS.Client.Command.getExpiration">
            <returns> the expiration. Use hasExpiration() to check if an expiration is set.</returns>
        </member>
        <member name="M:AMPS.Client.Command.hasExpiration">
            <returns> true if an expiration is set.</returns>
        </member>
        <member name="M:AMPS.Client.Command.setExpiration(System.Int32)">
            <param name="expiration"> the expiration to set</param>
        </member>
        <member name="M:AMPS.Client.Command.unsetExpiration">
            Clears any expiration value set on self.
        </member>
        <member name="M:AMPS.Client.Command.prepare(AMPS.Client.Client)">
            <summary>
            Binds self to a given client, preparing a message from that client to be sent.</summary>
            <param name="client_"> The client to bind against</param>
            <returns> The CommandId for this command, if one is set, or null.</returns>
        </member>
        <member name="M:AMPS.Client.Command.getClientSequenceNumber">
            <returns> the client sequence number generated for this command, or 0 if none was generated.</returns>
        </member>
        <member name="T:AMPS.Client.CompositeMessageBuilder">
            
             <summary>
             Used to create payloads for AMPS composite messages, which are messages with
             a number of parts where each part is a complete message of a specific
             message type.
             For example, a composite message type of "composite-json-binary" may be
             declared on the server that combines a set of JSON headers with
             an opaque binary payload. CompositeMessageBuilder makes it easy to assemble
             this payload.
             </summary>
            
        </member>
        <member name="M:AMPS.Client.CompositeMessageBuilder.#ctor">
            
             <summary>Create a new, empty CompositeMessageBuilder.</summary>
            
        </member>
        <member name="M:AMPS.Client.CompositeMessageBuilder.#ctor(System.Int32)">
            
             <summary>Create a new empty CompositeMessageBuilder.
             </summary>
             <param name="initialCapacity_">The default capacity in bytes for the serialized
             representation of a message. Ideal value is total message size in
             bytes + ( 4 * number of message parts).</param>
            
        </member>
        <member name="M:AMPS.Client.CompositeMessageBuilder.clear">
            
             <summary>Clears this object. Does not release or resize internal buffer.</summary>
             <returns>this object</returns>
            
        </member>
        <member name="M:AMPS.Client.CompositeMessageBuilder.append(System.Byte[],System.Int32,System.Int32)">
            
             <summary>Appends a message part to this object.</summary>
             <param name="data_">The bytes of the data to append.</param>
             <param name="offset_">The offset in data_ where your data begins.</param>
             <param name="length_">The length of your data. </param>
             <returns>this object</returns>
            
        </member>
        <member name="M:AMPS.Client.CompositeMessageBuilder.append(System.String)">
            
             <summary>Appends a message part to this object.</summary>
             <param name="data_">The data to append.</param>
             <returns>this object</returns>
            
        </member>
        <member name="M:AMPS.Client.CompositeMessageBuilder.setField(AMPS.Client.Fields.Field)">
            
             <summary>Sets a Field with the contents of this object.</summary>
             <param name="field_">the Field to set.</param>
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:AMPS.Client.CompositeMessageParser" -->
        <member name="M:AMPS.Client.CompositeMessageParser.#ctor">
             <summary>
             Creates a new CompositeMessageParser, with 0 valid parts.
            </summary>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.#ctor(AMPS.Client.Fields.Field)">
            <summary>
            Creates a new CompositeMessageParser and parses the provided message body.
            </summary>
            <param name="body_">The composite body (returned from Message.getDataRaw()).</param>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.#ctor(AMPS.Client.Message)">
            
             <summary>Creates a new CompositeMessageParser and parses a message's body.</summary>
             <param name="message_">The message containing a composite body.</param>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.parse(AMPS.Client.Message)">
            
             <summary>Parses a composite message.</summary>
             <param name="message_">The message with a composite body.</param>
             <returns>The number of message parts found in message_</returns>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.parse(AMPS.Client.Fields.Field)">
            
             <summary>Parses a composite messsage body.</summary>
             <param name="body_">The composite body (returned from Message.getDataRaw()).</param>
             <returns>The number of message parts found in body_</returns>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.getString(System.Int32)">
            
             <summary>Returns a part from a composite message body.</summary>
             <param name="index_">The part index to retrieve (0-based index)</param>
             <returns>The data of this body part, decoded as UTF-8.</returns>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.getString(System.Int32,System.Text.Encoding)">
            
             Returns a part from a composite message body.
             <param name="index_">The part index to retrieve (0-based index)</param>
             <param name="encoding_">The Encoding to decode this body with.</param>
             <returns>The data of this body part.</returns>
        </member>
        <member name="M:AMPS.Client.CompositeMessageParser.getPart(System.Int32,AMPS.Client.Fields.Field)">
            
             <summary>Returns a part from a composite message body.</summary>
             <param name="index_">The part index to retrieve (0-based index)</param>
             <param name="field_">The Field to update with the buffer, index, and length of this part.</param>
             <returns>The field passed as field_.</returns>
        </member>
        <member name="M:AMPS.Client.DefaultAuthenticator.authenticate(System.String,System.String)">
            <summary>
            Called by AMPS.Client, just before the logon command is seny.
            </summary>
            <param name="username_">The current value of the username as specified in the URI.</param>
            <param name="currentPassword_">The current value of the password, as specified in the URI.</param>
            <returns>The value that should be placed into the Password header field of the logon command</returns>
        </member>
        <member name="M:AMPS.Client.DefaultAuthenticator.retry(System.String,System.String)">
            <summary>
            Called when a logon "ack" is received with a status of "retry".
            </summary>
            <remarks>
            AMPS will continue trying to logon as long as the server returns "retry", 
            and this method continues to succeed.
            </remarks>
            <param name="username_">The username returned by the server's ACK message.</param>
            <param name="password_">The password or token returned in the server's ACK message.</param>
            <returns>The value that should be placed into the Password header for the next logon attempt.</returns>
        </member>
        <member name="M:AMPS.Client.DefaultAuthenticator.completed(System.String,System.String,AMPS.Client.Message.Reasons)">
            <summary>
            Called when a logon completes successfully.
            </summary>
            <remarks>
            Once a logon has completed, this method is called with the username and password
            that caused a successful logon.
            </remarks>
            <param name="username_">The username that successfully logged on to the server.</param>
            <param name="password_">The password that successfully logged on to the server.</param>
            <param name="reason_">The reason reported for success by the server.</param>
        </member>
        <member name="T:AMPS.Client.MessageHandler">
            <summary>
            Interface for classes that handle AMPS messages.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.MessageHandler.invoke(AMPS.Client.Message)" -->
        <member name="M:AMPS.Client.ServerChooser.getCurrentURI">
            Returns the current URI.
            
            @return A string with the URI to connect to, or null if no server is
                    available to connect to.
        </member>
        <member name="M:AMPS.Client.ServerChooser.getCurrentAuthenticator">
            Returns the Authenticator instance associated with the current URI.
            
            @return An {@link Authenticator} or {@code null} if none is required for
                    logon.
        </member>
        <member name="M:AMPS.Client.ServerChooser.reportFailure(System.Exception,AMPS.Client.ConnectionInfo)">
            Called by the {@link HAClient} when an error occurs connecting to the
            current URI, and/or when an error occurs logging on. Implementors will
            likely advance the current URI to the next one in a list, or choose to
            stay with the current one, based on the exception type.
            
            @param exception
                       The exception associated with this failure.
            @param uri
                       The uri that we attempted to connect with (but failed)
            @param clientName
                       The name of the client that is being reconnected.
        </member>
        <member name="M:AMPS.Client.ServerChooser.getError">
             Provides additional detail to be included in an exception thrown when
             the AMPS instance(s) are not available. Called by the {@link HAClient}
             when creating an exception.
            
             @return  An {@link String} with information about the connection
                      that failed and the reason for the failure. When no
                      further information is available, returns an empty string.
        </member>
        <member name="M:AMPS.Client.ServerChooser.reportSuccess(AMPS.Client.ConnectionInfo)">
            Called by the {@link HAClient} when successfully connected and logged on
            to the current instance.
            
            @param uri
                       The uri that we have successfully connected with.
            @param clientName
                       The name of the client that was successfully reconnected.
        </member>
        <member name="M:AMPS.Client.DefaultServerChooser.add(System.String)">
            Adds a URI to self.
            
            @param uri
                       The AMPS URI to add to the list.
        </member>
        <member name="M:AMPS.Client.DefaultServerChooser.addAll``1(``0)">
            Adds URIs to self.
            
            @param uris
                       The AMPS URIs to add to the list.
        </member>
        <member name="T:AMPS.Client.Exceptions.ConnectionException">
            <summary>
            Base class for exceptions thrown when the AMPS connection is not in an appropriate state
            for the requested operation.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.AMPSException">
            <summary>
            Base class for all exceptions in the AMPS client.
            </summary>
        </member>
        <member name="M:AMPS.Client.Exceptions.AMPSException.#ctor">
            <summary>
            Constructs a new AMPSException with a general error message.
            </summary>
        </member>
        <member name="M:AMPS.Client.Exceptions.AMPSException.#ctor(System.String)">
            <summary>
            Constructs a new AMPSException with a supplied error message.
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:AMPS.Client.Exceptions.AMPSException.#ctor(System.Exception)">
            <summary>
            Constructs a new AMPSException with a supplied inner exception.
            </summary>
            <param name="innerException">The exception to encapsulate inside this AMPSException</param>
        </member>
        <member name="M:AMPS.Client.Exceptions.AMPSException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new AMPSException with a supplied message and inner exception.
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">The exception to encapsulate inside this AMPSException</param>
        </member>
        <member name="T:AMPS.Client.Exceptions.BufferOverflowException">
            <summary>
            Thrown when the regular expression used in a subscription or query is invalid.
            Check the regular expression used in subscription, and check the server logs for more details.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.CommandException">
            <summary>
            Base class for exceptions thrown as a result of errors in sending commands to the AMPS server.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.SubidInUseException">
            <summary>
            Thrown when a subscription is attempted using an identifier that already exists.
            Ensure a unique identifier is chosen for each subscription on a given connection.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">
            <summary>
            Thrown when a subscription is attempted using an identifier that already exists.
            Ensure a unique identifier is chosen for each subscription on a given connection.
            </summary>
        </member>
        <member name="T:AMPS.Client.Fields.Field">
            <summary>
            Represents a single field in an AMPS message.
            </summary>
        </member>
        <member name="M:AMPS.Client.Fields.BookmarkField.clone">
            Provides a way to duplicate this object and retain its specific type (and hashcode() implementation).
        </member>
        <member name="M:AMPS.Client.FIXBuilder.getSize">
            Returns the number of bytes in the byte array containing the FIX message.
            
            @return number of valid bytes in the byte array
        </member>
        <member name="M:AMPS.Client.FIXBuilder.getBytes">
            Returns the byte array containing the FIX message. The number of valid
            bytes within the buffer is returned from getSize().
            
            @return byte array containing the FIX message
        </member>
        <member name="M:AMPS.Client.FIXBuilder.append(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends a tag and and value pair contained within a byte buffer to the FIX message.
            </summary>
            <param name="tag">The integer FIX tag to append</param>
            <param name="value">The byte buffer containing the FIX value to append</param>
            <param name="offset">The starting location of the value inside the byte buffer</param>
            <param name="length">The length of the value inside the byte buffer</param>
            <returns>A reference to this object</returns>
            <exception cref="T:System.ArgumentException">Thrown if the tag argument is negative.</exception>
        </member>
        <member name="M:AMPS.Client.FIXBuilder.append(System.Int32,System.String)">
            <summary>
            Appends a tag and value pair to the FIX message.
            </summary>
            <param name="tag">the integer FIX tag to append</param>
            <param name="value">the FIX value for the tag to append. The value will be converted
            to an ISO-8859-1 byte array for writing.</param>
            <returns>a reference to this object.</returns>
            <exception cref="T:System.ArgumentException">If the tag argument is negative.</exception>
            <exception cref="T:AMPS.Client.Exceptions.CommandException">If the tag or value argument is not convertible to ISO-8859-1</exception>
        </member>
        <member name="T:AMPS.Client.TCPSTransport">
            <summary>
            Implements a secure transport for communicating with AMPS
            over a SslStream.
            
            <see cref="T:System.Net.Security.SslStream"/>
            </summary>
        </member>
        <member name="M:AMPS.Client.Transport.connect(System.Uri)">
            <summary>
            Connect to an AMPS server.
            </summary>
            <param name="uri">Specifies the protocol and address of the server</param>
            <exception cref="T:AMPS.Client.Exceptions.ConnectionRefusedException"/>
            <exception cref="T:AMPS.Client.Exceptions.AlreadyConnectedException"/>
        </member>
        <member name="M:AMPS.Client.Transport.send(AMPS.Client.Message)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException"/>
        </member>
        <member name="M:AMPS.Client.Transport.writeQueueSize">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException"/>
        </member>
        <member name="M:AMPS.Client.Transport.readQueueSize">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException"/>
        </member>
        <member name="M:AMPS.Client.Transport.flush(System.Int64)">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException"/>
        </member>
        <member name="M:AMPS.Client.Transport.setTransportFilter(TransportFilter)">
            <summary>
            Sets a TransportFilter that filters raw bytes bfeore send and after receive.
            </summary>
            <param name="filter_">A TransportFilter such as AMPS.Client.TransportTraceFilter.</param>
        </member>
        <member name="M:AMPS.Client.TCPSTransport.#ctor(AMPS.Client.Protocol)">
            <summary>
            Construct a TCPSTransport object for the given Protocol.
            </summary>
            <param name="protocol">The protocol for communcating with AMPS.
            </param>
        </member>
        <member name="M:AMPS.Client.TCPSTransport.#ctor(AMPS.Client.Protocol,AMPS.Client.Properties)">
            <summary>
            Construct a TCPSTransport object for the given Protocol.
            </summary>
            <param name="protocol">The protocol for communicating with AMPS.
            </param>
            <param name="properties">Custom properties used by the underlying
             TCP transport.</param>
        </member>
        <member name="P:AMPS.Client.TCPSTransport.RemoteCertificateValidationCallback">
            <summary>
            Gets or sets the callback delegate used by SslStream to validate
            the remote certificate from AMPS.
            <seealso cref="P:System.Net.Security.SslStream.RemoteCertificate"/>
            </summary>
        </member>
        <member name="P:AMPS.Client.TCPSTransport.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled SSL protocols used for connecting to AMPS.
            <seealso cref="P:System.Net.Security.SslStream.SslProtocol"/>
            </summary>
        </member>
        <member name="P:AMPS.Client.TCPSTransport.CheckCertificateRevocation">
            <summary>
            Gets or sets whether certificate revocation should be checked.
            <seealso cref="P:System.Net.Security.SslStream.CheckCertRevocationStatus"/>
            </summary>
        </member>
        <member name="T:TransportFilter">
            <summary>
            Filter raw incoming and outgoing data on a Transport.
            </summary>
        </member>
        <member name="M:TransportFilter.outgoing(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when (typically just before) raw data is sent to the AMPS instance.
            </summary>
            <param name="data">A byte array containing raw data to be sent to the AMPS instance.</param>
            <param name="position">The position in data where the raw data begins</param>
            <param name="length">The length of the raw data to be sent.</param>
        </member>
        <member name="M:TransportFilter.incoming(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called just after raw data is recieved from the AMPS instance.
            </summary>
            <param name="data">A byte array containing raw data to be sent to the AMPS instance.</param>
            <param name="position">The position in data where the raw data begins</param>
            <param name="length">The length of the raw data to be sent.</param>
        </member>
        <member name="T:AMPS.Client.TransportTraceFilter">
            <summary>
            An implementation of TransportFilter that traces to a System.IO.TextWriter.
            To use, instantiate and hen pass to Transport's setTransportFilter, for example:
            <example>
              Client client = new Client(...);
              client.connect(...);
              client.getTransport.setTransportFilter(
                new TransportTracFilter(Console.out)
              );
            </example>
            </summary>
        </member>
        <member name="M:AMPS.Client.TransportTraceFilter.#ctor(System.IO.TextWriter)">
            <summary>
            Construct a TransportTraceFilter to trace messages on writer_.
            </summary>
            <param name="writer">A System.IO.TextWriter to trace on.</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String)">
            <summary>
            Creates a new AMPS client
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new client
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="version">The AMPS server version to connect to</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,AMPS.Client.Store)">
            <summary>
            Creates a client with a persistent store.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="store">Store to use for the client</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,AMPS.Client.Store,System.Int32)">
            <summary>
            Creates a client with a persistent store.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="store">Store to use for the client</param>
            <param name="version">Server version connecting to</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,AMPS.Client.Transport)">
            <summary>
            Creates a client with a transport.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="transport">Transport to use with the client</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,AMPS.Client.Transport,System.Int32)">
            <summary>
            Creates a client with a transport.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="transport">Transport to use with the client</param>
            <param name="version">Server version connecting to</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,AMPS.Client.Transport,AMPS.Client.Store)">
            <summary>
            Creates a client with a transport and persistent store.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="transport">Transport to use with the client</param>
            <param name="store">Store to use for the client</param>
        </member>
        <member name="M:AMPS.Client.Client.#ctor(System.String,AMPS.Client.Transport,AMPS.Client.Store,System.Int32)">
            <summary>
            Creates a client with a transport and persistent store.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="transport">Transport to use with the client</param>
            <param name="store">Store to use for the client</param>
            <param name="version">Server version connecting to</param>
        </member>
        <member name="M:AMPS.Client.Client.getName">
            <summary>
            Return the name of the Client.
            </summary>
            <returns>String Client name</returns>
        </member>
        <member name="M:AMPS.Client.Client.getServerVersion">
             <summary>
             Return the server version retrieved during logon. If the client has
             not logged on or is connected to a server whose version is less than
             3.8.0.0 this function will return 0.
             The version uses 2 digits each for major minor maintenance and hotfix
             i.e., 3.8.1.5 will return 3080105
             Versions of AMPS prior to 3.8.0.0 did not return the server version
             to the client in the logon ack.
             </summary>
             <returns> The version of the server as a long.</returns>
            
        </member>
        <member name="M:AMPS.Client.Client.getVersionAsInt(System.String)">
            <summary>
            Return the numeric value for the given version string with the pattern:
            Major.Minor.Maintenance.Hotfix
            The version uses 2 digits each for major minor maintenance and hotfix
            i.e., 3.8.1.5 will return 3080105
            Version strings passed in can be shortened to not include all levels
            so 3.8 will return 3080000.
            </summary>
            <param name="version"> The version string to convert.</param>
            <returns> The version as a int.</returns>
            <exception cref="T:AMPS.Client.Exceptions.CommandException">The string doesn't represent a valid version.</exception>
        </member>
        <member name="M:AMPS.Client.Client.getURI">
            <summary>Returns the URI the client is connected to.</summary>
            <returns><typeparamref name="Uri"/>the URI the client is configured
            to connect to</returns>
        </member>
        <member name="M:AMPS.Client.Client.getTransport">
            <summary>
            Return the underlying transport.
            For advanced users, this method provides direct access to the transport.
            Care needs to be taken to not modify the underlying transport in ways that
            are incompatible with the Client.
            </summary>
            <returns>Transport Underlying transport instance</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.Client.connect(System.String)" -->
        <member name="M:AMPS.Client.Client.setDisconnectHandler(AMPS.Client.ClientDisconnectHandler)">
            <summary>
            Sets the <typeparamref name="ClientDisconnectHandler"/>. In the event that the Client is unintentionally
            disconnected from AMPS, the <code>invoke</code> method from the
            ClientDisconnectHandler will be invoked.
            </summary>
            <param name="disconnectHandler">The disconnect handler</param>
        </member>
        <member name="M:AMPS.Client.Client.setDisconnectHandler(System.Action{AMPS.Client.Client})">
            <summary>
            Sets the lambda function called in the event of client disconnect
            </summary>
            <param name="disconnectHandler"></param>
        </member>
        <member name="M:AMPS.Client.Client.getDisconnectHandler">
            <summary>
            Gets the currently configured <typeparamref name="ClientDisconnectHandler"/>
            </summary>
            <returns>returns the currently configured <typeparamref name="ClientDisconnectHandler"/></returns>
        </member>
        <member name="M:AMPS.Client.Client.setLastChanceMessageHandler(AMPS.Client.MessageHandler)">
            <summary>
            Sets the <typeparamref name="MessageHandler"/> instance used when no other handler matches.
            </summary>
            <param name="messageHandler">The message handler to invoke when no other handler matches.</param>
        </member>
        <member name="M:AMPS.Client.Client.setLastChanceMessageHandler(System.Action{AMPS.Client.Message})">
            <summary>
            Sets the <typeparamref name="MessageHandler"/> instance used when no other handler matches.
            </summary>
            <param name="messageHandler">The message handler to invoke when no other handler matches.</param>
        </member>
        <member name="M:AMPS.Client.Client.setUnhandledMessageHandler(AMPS.Client.MessageHandler)">
            <summary>
            Sets the <typeparamref name="MessageHandler"/> instance used when no other handler matches.
            </summary>
            <param name="messageHandler">The message handler to invoke when no other handler matches.</param>
        </member>
        <member name="M:AMPS.Client.Client.setUnhandledMessageHandler(System.Action{AMPS.Client.Message})">
            <summary>
            Sets the lambda function used when no other handler matches.
            </summary>
            <param name="messageHandler">The function to invoke when no other handler matches.</param>
        </member>
        <member name="M:AMPS.Client.Client.setExceptionListener(AMPS.Client.Client.ExceptionListener)">
            <summary>
            Sets the ExceptionListener instance used for communicating absorbed exceptions.
            </summary>
            <param name="exceptionListener">The exception listener instance to invoke for exceptions.</param>
        </member>
        <member name="M:AMPS.Client.Client.getExceptionListener">
            <summary>
            Gets the currently configured <typeparamref name="ExceptionListener"/>
            </summary>
            <returns>returns the currently configured <typeparamref name="ExceptionListener"/></returns>
        </member>
        <member name="M:AMPS.Client.Client.setSubscriptionManager(AMPS.Client.SubscriptionManager)">
            <summary>
            Sets the <typeparamref name="SubscriptionManager"/> instance used
            for recording active subscriptions.
            </summary>
            <param name="subscriptionManager">The subscription manager invoked
            when there is a change to the subscriptions</param>
        </member>
        <member name="M:AMPS.Client.Client.getSubscriptionManager">
            <summary>
            Gets the currently configured <typeparamref name="SubscriptionManager"/>
            </summary>
            <returns>returns the currently configured <typeparamref name="SubscriptionManager"/></returns>
        </member>
        <member name="M:AMPS.Client.Client.setDuplicateMessageHandler(AMPS.Client.MessageHandler)">
            <summary>
            Sets the <typeparamref name="MessageHandler"/> that will be called in the
            event of a duplicate message
            </summary>
            <param name="messageHandler"><typeparamref name="MessageHandler"/>
            to invoke in the event of duplicate messages</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.Client.getDuplicateMessageHandler" -->
        <member name="M:AMPS.Client.Client.setFailedWriteHandler(AMPS.Client.FailedWriteHandler)">
            <summary>Sets the <typeparamref name="FailedWriteHandler"/>
            instance that will be called in the event that messages fail to be written</summary>
            <param name="handler_"><typeparamref name="FailedWriteHandler"/> to invoke for failed writes.</param>
        </member>
        <member name="M:AMPS.Client.Client.setFailedWriteHandler(AMPS.Client.FailedWriteHandlerV4)">
            <summary>Sets the <typeparamref name="FailedWriteHandlerV4"/>
            instance that will be called in the event that messages fail to be written</summary>
            <param name="handler_"><typeparamref name="FailedWriteHandlerV4"/> to invoke for failed writes.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.Client.getFailedWriteHandler" -->
        <member name="M:AMPS.Client.Client.disconnect">
            <summary>
            Disconnect from the AMPS server.
            </summary>
        </member>
        <member name="M:AMPS.Client.Client.close">
            <summary>
            Disconnect from the AMPS server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.Client.allocateMessage" -->
        <member name="M:AMPS.Client.Client.setHeartbeat(System.Int32,System.Int32)">
             <summary>
             Sets a heartbeat on this connection.  When a heartbeat is set, the client
             periodically sends a heartbeat message to AMPS. This helps the client
             more quickly detect disconnection from AMPS.
             </summary>
            <param name="heartbeatInterval_">the interval (in seconds) at which to send a heartbeat message</param>
            <param name="readTimeout_">the length of time (in seconds) to wait for a response to a heartbeat message</param>
        </member>
        <member name="M:AMPS.Client.Client.setHeartbeat(System.Int32)">
             <summary>
             Sets a heartbeat on this connection.  When a heartbeat is set, the client
             periodically sends a heartbeat message to AMPS. This helps the client
             more quickly detect disconnection from AMPS.
             </summary>
            <param name="heartbeatInterval_">the interval (in seconds) at which to send a heartbeat message</param>
        </member>
        <member name="M:AMPS.Client.Client.send(AMPS.Client.Message)">
            <summary>
            Send a <typeparamref name="Message"/> to AMPS via the <typeparamref name="Transport"/> used in the Client.
            </summary>
            <param name="m">The message to send</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
        </member>
        <member name="M:AMPS.Client.Client.addMessageHandler(AMPS.Client.CommandId,AMPS.Client.MessageHandler,AMPS.Client.Message.AckTypes,System.Boolean)">
            <summary>
            Adds a MessageHandler for a given CommandId to self.
            </summary>
            <param name="commandId_">The command, query, or subid used for this route.</param>
            <param name="messageHandler_">The message handler to route to</param>
            <param name="requestedAcks_">The acks requested to be sent to the handler</param>
            <param name="isSubscribe_">True if this route is for an ongoing subscription</param>
        </member>
        <member name="M:AMPS.Client.Client.removeMessageHandler(AMPS.Client.CommandId)">
            Remove a route from self.
            <param name="commandId_">The route to remove</param>
            <returns>true if the route was removed.</returns>
        </member>
        <member name="M:AMPS.Client.Client.send(AMPS.Client.MessageHandler,AMPS.Client.Message,System.Int64)">
            <summary>
            Send a Message to AMPS and register the messageHandler for any messages resulting from
            command execution.
            </summary>
            <param name="messageHandler">The message handler that'll receive messages for this command</param>
            <param name="message"> The message to send</param>
            <param name="timeout">The number of milliseconds to wait for command acknowledgment</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.send(System.Action{AMPS.Client.Message},AMPS.Client.Message,System.Int64)">
            <summary>
            Send a Message to AMPS and register the messageHandler for any messages resulting from
            command execution.
            </summary>
            <param name="messageHandler">The message handler that'll receive messages for this command</param>
            <param name="message"> The message to send</param>
            <param name="timeout">The number of milliseconds to wait for command acknowledgment</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.publish(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
             <summary>
             Publish a message to an AMPS topic. If the client
             was created with a persistent store on construction, then the client will store
             before forwarding the message to AMPS. In this store-and-forward case, the persistent
             store will notify the user, when requested via callback, of the successful persistence
             of the record within AMPS. If a DisconnectException occurs, the message is still
              stored in the publish store.
             </summary>
            <param name="topic">array containing the topic to publish the data to</param>
            <param name="topicOffset">offset into topic array where the topic name begins</param>
            <param name="topicLength">length of topic in <paramref name="topic"/> array</param>
            <param name="data">array containing the data to publish</param>
            <param name="dataOffset">offset into the data array where the data begins</param>
            <param name="dataLength">length of the data in <paramref name="data"/> array</param>
            <param name="expiration">the number of seconds until the message expires.</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client is not connected; the program needs to call connect()</exception>
            <exception cref="T:AMPS.Client.Exceptions.StoreException">An error occurred writing to the local HA store</exception>
        </member>
        <member name="M:AMPS.Client.Client.publish(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Publish a message to an AMPS topic. If the client
             was created with a persistent store on construction, then the client will store
             before forwarding the message to AMPS.  In this store-and-forward case, the persistent
             store will notify the user, when requested via callback, of the successful persistence
             of the record within AMPS. If a DisconnectedException occurs, the message is still
             stored in the publish store.
             </summary>
            <param name="topic">array containing the topic to publish the data to</param>
            <param name="topicOffset">offset into topic array where the topic name begins</param>
            <param name="topicLength">length of topic in <paramref name="topic"/> array</param>
            <param name="data">array containing the data to publish</param>
            <param name="dataOffset">offset into the data array where the data begins</param>
            <param name="dataLength">length of the data in <paramref name="data"/> array</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client is not connected; the program needs to call connect()</exception>
            <exception cref="T:AMPS.Client.Exceptions.StoreException">An error occurred writing to the local HA store</exception>
        </member>
        <member name="M:AMPS.Client.Client.publish(System.String,System.String)">
            <summary>
            Publish a message to an AMPS topic. If the client
            was created with a persistent store on construction, then the client will store
            before forwarding the message to AMPS. In this store-and-forward case, the persistent
            store will notify the user, when requested via callback, of the successful persistence
            of the record within AMPS. If a DisconnectException occurs the message is still
            stored in the publish store.
            </summary>
            <param name="topic">Topic to publish the data to</param>
            <param name="data">Data to publish to the topic</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client is disconnected; the program needs to call connect()</exception>
        </member>
        <member name="M:AMPS.Client.Client.publish(System.String,System.String,System.Int32)">
            <summary>
            Publish a message to an AMPS topic. If the client
            was created with a persistent store on construction, then the client will store
            before forwarding the message to AMPS. In this store-and-forward case, the persistent
            store will notify the user, when requested via callback, of the successful persistence
            of the record within AMPS. If a DisconnectException occurs, the message is still
            stored in the publish store.
            </summary>
            <param name="topic">Topic to publish the data to</param>
            <param name="data">Data to publish to the topic</param>
            <param name="expiration">The number of seconds until the message expires.</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client is not connected; the program needs to call connect()</exception>
        </member>
        <member name="M:AMPS.Client.Client.deltaPublish(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
             Delta publish a message to an AMPS topic. If the client
             was created with a persistent store on construction, then the client will store
             before forwarding the message to AMPS.  In this store-and-forward case, the persistent
             store will notify the user, when requested via callback, of the successful persistence
             of the record within AMPS.
            </summary>
            <param name="topic">array containing the topic to publish the data to</param>
            <param name="topicOffset">offset into topic array where the topic name begins</param>
            <param name="topicLength">length of topic in <paramref name="topic"/> array</param>
            <param name="data">array containing the data to publish</param>
            <param name="dataOffset">offset into the data array where the data begins</param>
            <param name="dataLength">length of the data in <paramref name="data"/> array</param>
        </member>
        <member name="M:AMPS.Client.Client.deltaPublish(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Delta publish a message to an AMPS topic. If the client
             was created with a persistent store on construction, then the client will store
             before forwarding the message to AMPS.  In this store-and-forward case, the persistent
             store will notify the user, when requested via callback, of the successful persistence
             of the record within AMPS.
            </summary>
            <param name="topic">array containing the topic to publish the data to</param>
            <param name="topicOffset">offset into topic array where the topic name begins</param>
            <param name="topicLength">length of topic in <paramref name="topic"/> array</param>
            <param name="data">array containing the data to publish</param>
            <param name="dataOffset">offset into the data array where the data begins</param>
            <param name="expiration">The number of seconds until the message expires.</param>
            <param name="dataLength">length of the data in <paramref name="data"/> array</param>
        </member>
        <member name="M:AMPS.Client.Client.deltaPublish(System.String,System.String)">
            <summary>
            Delta publish a message to an AMPS topic.
            </summary>
            <param name="topic">Topic to publish the data to</param>
            <param name="data">Data to publish to the topic</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client was disconnected at time of publish</exception>
        </member>
        <member name="M:AMPS.Client.Client.deltaPublish(System.String,System.String,System.Int32)">
            <summary>
            Delta publish a message to an AMPS topic.
            </summary>
            <param name="topic">Topic to publish the data to</param>
            <param name="data">Data to publish to the topic</param>
            <param name="expiration">The number of seconds until the message expires.</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client was disconnected at time of publish</exception>
        </member>
        <member name="M:AMPS.Client.Client.logon(System.Int64)">
            <summary>
            Logs into AMPS with the parameters provided in the connect method and the logon correlation data if set.
            </summary>
            <param name="timeout">The number of milliseconds to wait for the command to execute</param>
            <returns>The command identifier</returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
        </member>
        <member name="M:AMPS.Client.Client.logon(System.Int64,AMPS.Client.Authenticator)">
            <summary>
            Logs into AMPS with the parameters provided in the connect method and the logon correlation data if set.
            </summary>
            <param name="timeout">The number of milliseconds to wait for the command to execute</param>
            <param name="authenticator">The authenticator to use for logging in.</param>
            <returns>The command identifier</returns>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
        </member>
        <member name="M:AMPS.Client.Client.logon">
            <summary>
            Logs into AMPS with the parameters provided in the connect method.
            </summary>
            <returns>The command identifier</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
        </member>
        <member name="M:AMPS.Client.Client.bookmarkSubscribe(AMPS.Client.MessageHandler,System.String,System.String,AMPS.Client.CommandId,System.String,System.String,System.Int64)">
            <summary>
            Places a bookmark subscription with AMPS.
            Starts replay at the most recent message reported by the BookmarkStore.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">Only messages with data that match this filter will be received</param>
            <param name="subId"> You may optionally provide a subscription ID
            to ease recovery scenarios, instead of having the system automatically
             generate one for you. When used with the 'replace' option, this
             is the subscription to be replaced. With a bookmark store,
             this is the subscription ID used for recovery. So, when
             using a persistent bookmark store, provide an explicit
            subscription ID that is consistent across application restarts.</param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            subscription.  Use Message.Options.None if no options are desired.</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The universally unique <typeparamref name="CommandId"/> assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">A subscription with this <paramref name="subId"/> is already registered</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The provided filter is invalid</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The topic specified was an invalid regular expression</exception>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The operation took longer than the timeout to execute</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client wasn't connected when the operation was executed</exception>
        </member>
        <member name="M:AMPS.Client.Client.bookmarkDeltaSubscribe(AMPS.Client.MessageHandler,System.String,System.String,AMPS.Client.CommandId,System.String,System.String,System.Int64)">
            <summary>
            Places a bookmark subscription with AMPS.
            Starts replay at the message specified by the provided bookmark.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">Only messages with data that match this filter will be received</param>
            <param name="subId">subId The subscription ID.  You may wish to
            supply your own subscription ID to ease recovery scenarios, instead
            of having the system generate one for you.</param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            subscription.  Use Message.Options.None if no options are desired.</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The universally unique <typeparamref name="CommandId"/> assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">A subscription with this <paramref name="subId"/> is already registered</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The provided filter is invalid</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The topic specified was an invalid regular expression</exception>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The operation took longer than the timeout to execute</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client wasn't connected when the operation was executed</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(AMPS.Client.MessageHandler,System.String,System.String,System.Int64)">
            <summary>
            Places a subscription with AMPS.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(System.Action{AMPS.Client.Message},System.String,System.String,System.Int64)">
            <summary>
            Places a subscription with AMPS.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(System.String,System.String,System.String,System.Int64,System.String)">
            
             <summary>Places a subscription with AMPS.</summary>
            
             <param name="topic">The topic to subscribe to</param>
             <param name="filter">The filter</param>
             <param name="options">A value from Message.Options indicating additional processing options.</param>
             <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
             <param name="subId">The subscription id to use for the subscription.</param>
             <returns>A MessageStream to iterate over</returns>
             <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
             <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
             <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
             <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
             <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
             <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
             <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(AMPS.Client.MessageHandler,System.String,System.String,System.String,System.Int64,System.String)">
            
             <summary>Places a subscription with AMPS.</summary>
            
             <param name="messageHandler">The message handler to invoke with matching messages</param>
             <param name="topic">The topic to subscribe to</param>
             <param name="filter">The filter</param>
             <param name="options">A value from Message.Options indicating additional processing options.</param>
             <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
             <param name="subId">The subscription id to use for the subscription.</param>
             <returns>The command identifier assigned to this command</returns>
             <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
             <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
             <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
             <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
             <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
             <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
             <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(System.Action{AMPS.Client.Message},System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Places a subscription with AMPS.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="options">A value from <typeparamref name="Message.Options"/> indicating additional processing options.</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(AMPS.Client.MessageHandler,System.String,System.Int64)">
            <summary>
            Places a subscription with AMPS.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.subscribe(System.Action{AMPS.Client.Message},System.String,System.Int64)">
            <summary>
            Places a subscription with AMPS.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.deltaSubscribe(AMPS.Client.MessageHandler,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Places a delta subscription with AMPS.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.deltaSubscribe(System.Action{AMPS.Client.Message},System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Places a delta subscription with AMPS.
            </summary>
            <param name="messageHandler">The lambda function to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.SubscriptionAlreadyExistsException">The specified subscription ID already exists.</exception>
        </member>
        <member name="M:AMPS.Client.Client.unsubscribe(AMPS.Client.CommandId)">
            <summary>
            Remove a subscription from AMPS.
            </summary>
            <param name="subscriptionId">The subscription identifier to remove</param>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client was disconnected at the time of execution</exception>
        </member>
        <member name="M:AMPS.Client.Client.unsubscribe">
            <summary>
            Remove all of the client's subscriptions from AMPS.
            </summary>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The client was disconnected at the time of execution</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>A MessageStream to iterate over</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(AMPS.Client.MessageHandler,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(System.Action{AMPS.Client.Message},System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(AMPS.Client.MessageHandler,System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(AMPS.Client.MessageHandler,System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(System.Action{AMPS.Client.Message},System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The function to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(AMPS.Client.MessageHandler,System.String,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sow(System.Action{AMPS.Client.Message},System.String,System.Int64)">
            <summary>
            Executes a SOW query.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns></returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>A MessageStream to iterate over.</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(AMPS.Client.MessageHandler,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(System.Action{AMPS.Client.Message},System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(AMPS.Client.MessageHandler,System.String,System.String,System.Int32,System.Boolean,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="oofEnabled">True if out-of-focus ("OOF") messages are desired.</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(System.Action{AMPS.Client.Message},System.String,System.String,System.Int32,System.Boolean,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="a">The function to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="sendOOF">True if out-of-focus ("OOF") messages are desired.</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(AMPS.Client.MessageHandler,System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(System.Action{AMPS.Client.Message},System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="a">The function to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(AMPS.Client.MessageHandler,System.String,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndSubscribe(System.Action{AMPS.Client.Message},System.String,System.Int64)">
            <summary>
            Executes a SOW query and places a subscription.
            </summary>
            <param name="a">The function to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(AMPS.Client.MessageHandler,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="orderBy">The ordering property </param>
            <param name="bookmark">A bookmark identifer, one of the constants from <see cref="T:AMPS.Client.Client.Bookmarks"/>, or a timestamp of the form <i>YYYYmmddTHHMMSS</i>, as described in the AMPS User's Guide. This the point at which AMPS executes the historical query.</param>
            <param name="options">A <see cref="!:Message.Options&gt;"/> value indicating desired options for this
            query.  Use Message.Options.None if no options are desired.</param>
            <param name="batchSize">The batching parameter to use for the results</param>
            <param name="topN">The maximum number of records the server will return (default is all that match)</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(AMPS.Client.MessageHandler,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="oofEnabled">Specifies whether or not Out-of-Focus processing is enabled</param>
            <param name="sendEmpties">Specifies whether or not unchanged records are received on the delta subscription</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(System.Action{AMPS.Client.Message},System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter </param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="oofEnabled">Specifies whether or not Out-of-Focus processing is enabled</param>
            <param name="sendEmpties">Specifies whether or not unchanged records are received on the delta subscription</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(AMPS.Client.MessageHandler,System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(System.Action{AMPS.Client.Message},System.String,System.Int32,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="batchSize">The batching parameter to use for the SOW query results</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(AMPS.Client.MessageHandler,System.String,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowAndDeltaSubscribe(System.Action{AMPS.Client.Message},System.String,System.Int64)">
            <summary>
            Executes a SOW query and places a delta subscription.
            </summary>
            <param name="messageHandler">The message handler to invoke with matching messages</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="timeout">The maximum time to wait for the subscription to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadRegexTopicException">The specified regex topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowDelete(System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete with filter.
            </summary>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter. To delete all records, set a filter that is always true ('1=1')</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The stats message returned from the sow_delete.</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowDelete(AMPS.Client.MessageHandler,System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete with filter.
            </summary>
            <param name="messageHandler">The message handler to invoke with stats and completed acknowledgements</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter. To delete all records, set a filter that is always true ('1=1')</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowDelete(System.Action{AMPS.Client.Message},System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete with filter.
            </summary>
            <param name="messageHandler">The message handler to invoke with stats and completed acknowledgements</param>
            <param name="topic">The topic to subscribe to</param>
            <param name="filter">The filter. To delete all records, set a filter that is always true ('1=1')</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.AuthenticationException">An authentication exception occured while logging on.</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
            <exception cref="T:AMPS.Client.Exceptions.BadFilterException">The specified filter was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.setLogonCorrelationData(System.String)">
            <summary>
            Gets the uninterpreted logon correlation information currently set.
            </summary>
            <param name="correlationData">The base64 data to be used for logon correlation.</param>
        </member>
        <member name="M:AMPS.Client.Client.getLogonCorrelationData">
            <summary>
            Gets the uninterpreted logon correlation information currently set.
            </summary>
            <returns>The base64 data to be used for logon correlation.</returns>
        </member>
        <member name="M:AMPS.Client.Client.sowDeleteByKeys(AMPS.Client.MessageHandler,System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete by sow key.
            </summary>
            <param name="messageHandler">The message handler to invoke with stats and completed acknowledgements</param>
            <param name="topic">The topic to delete from</param>
            <param name="keys">The keys to delete</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowDeleteByKeys(System.Action{AMPS.Client.Message},System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete by sow key.
            </summary>
            <param name="messageHandler">The message handler to invoke with stats and completed acknowledgements</param>
            <param name="topic">The topic to delete from</param>
            <param name="keys">The keys to delete</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowDeleteByData(AMPS.Client.MessageHandler,System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete by data. AMPS uses key fields in the data to find and delete a message with the same keys.
            </summary>
            <param name="messageHandler">The message handler to invoke with stats and completed acknowledgements</param>
            <param name="topic">The topic to delete from</param>
            <param name="data">The message to match and delete in the SOW cache.</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.sowDeleteByData(System.Action{AMPS.Client.Message},System.String,System.String,System.Int64)">
            <summary>
            Executes a SOW delete by data. AMPS uses key fields in the data to find and delete a message with the same keys.
            </summary>
            <param name="messageHandler">The message handler to invoke with stats and completed acknowledgements</param>
            <param name="topic">The topic to delete from</param>
            <param name="data">The message to match and delete in the SOW cache.</param>
            <param name="timeout">The maximum time to wait for the SOW delete to be started to be placed (milliseconds)</param>
            <returns>The command identifier assigned to this command</returns>
            <exception cref="T:AMPS.Client.Exceptions.TimedOutException">The command execution exceeded the timeout value</exception>
            <exception cref="T:AMPS.Client.Exceptions.DisconnectedException">The connection was disconnected at time of send</exception>
            <exception cref="T:AMPS.Client.Exceptions.NotEntitledException">An entitlement error occured on this topic.</exception>
            <exception cref="T:AMPS.Client.Exceptions.InvalidTopicException">The specified topic was invalid.</exception>
        </member>
        <member name="M:AMPS.Client.Client.publishFlush">
            Ensures that AMPS messages are sent and have been processed by the
            AMPS server. When the client is connected to a server that implements
            the flush command, the client issues that command and waits for an
            acknowledgement. For older versions of AMPS, the client sends a
            publish to a dummy topic. This mehthod blocks until messages have
            been processed or until the timeout expires, and is most useful when
            the application reaches a point at which it is acceptable to block
            to ensure that messages are delivered to the AMPS server. For
            example, an application might call publishFlush before exiting.
            One thing to note is that if AMPS is unavailable (HA Client),
            publishFlush needs to wait for a connection to come back up
            which may look like it's hanging.
        </member>
        <member name="M:AMPS.Client.Client.publishFlush(System.Int32)">
            
             <summary>Clear the queued messages which may be waiting in the transport or publish store</summary>
             <param name="timeout"> Number of milliseconds to wait for flush</param>
        </member>
        <member name="M:AMPS.Client.Client.flush">
             Clear the queued messages which may be waiting in the transport
            
             @return long Number of messages or bytes queued after flush is completed or timed out
            
        </member>
        <member name="M:AMPS.Client.Client.flush(System.Int64)">
            <summary>
            Clear the queued messages which may be waiting in the transport
            </summary>
            <param name="timeout">Number of milliseconds to wait for flush</param>
            <returns>long Number of messages or bytes queued after flush is completed or timed out</returns>
        </member>
        <member name="M:AMPS.Client.Client.getVersion">
            <summary>
            Return the build number for the client that is stored in the Manifest.mf of the jar file.
            </summary>
            <returns>String Build version number.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.Client.getConnectionInfo" -->
        <member name="M:AMPS.Client.Client.ack(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            ACKs a message queue message.
            </summary>
            <param name="topic">The message topic</param>
            <param name="topicPos">The starting index of the topic name</param>
            <param name="topicLen">The length of the topic name</param>
            <param name="bookmark">The message bookmark</param>
            <param name="bookmarkPos">The starting index of the message bookmark</param>
            <param name="bookmarkLen">The length of the messasge bookmark</param>
        </member>
        <member name="M:AMPS.Client.Client.ack(AMPS.Client.Fields.Field,AMPS.Client.Fields.Field)">
            <summary>
            ACKs a message queue message.
            </summary>
            <param name="topic">The topic of the message</param>
            <param name="bookmark">The bookmark of the message</param>
        </member>
        <member name="M:AMPS.Client.Client.ack(System.String,System.String)">
            <summary>
            ACKS a message queue message.
            </summary>
            <param name="topic">The topic of the message.</param>
            <param name="bookmark">The bookmark of the message.</param>
        </member>
        <member name="M:AMPS.Client.Client.setAutoAck(System.Boolean)">
            <summary>
            Enables or disables auto-acking. When auto-acking is enabled any
            successful return from a message handler functiokn will result in
            an ACK (sow_delete) message sent to the server. Any thrown
            exception will result in a "cancel" ACK sent to the server.
            </summary>
            <param name="isAutoAckEnabled">true to enable, false to disable</param>
        </member>
        <member name="M:AMPS.Client.Client.getAutoAck">
            <summary>
            Returns the current setting of auto-acking.
            </summary>
            <returns>true if enabled, false if disabled</returns>
        </member>
        <member name="M:AMPS.Client.Client.setAckBatchSize(System.Int32)">
            <summary>
            Sets the current ACK batch size.The ACK batch size controls how many successful ACKs
            (which are sow_delete messages) are batched together before sending to the server.When
            combined with the "max_backlog" and MaxPerSubscriptionBacklog server configuration parameter,
            greater network efficiency can be achieved when using message queues.Setting this parameter
            causes calls to "ack" and successful auto-acks to be batched; unsuccessful/cancel acks
            are sent immediately.
            </summary>
            <param name="batchSize">The batch size to use (default:1)</param>
        </member>
        <member name="M:AMPS.Client.Client.getAckBatchSize">
            <summary>
            Returns the current ACK batch size. See the documentation for <see cref="M:AMPS.Client.Client.setAckBatchSize(System.Int32)"/>.
            </summary>
            <returns>The current batch size.</returns>
        </member>
        <member name="M:AMPS.Client.Client.setAckTimeout(System.Int64)">
            <summary>
            Sets the ack timeout -- the maximum time to let a success ack be cached before sending.
            </summary>
            <param name="ackTimeout">the ack timeout, in milliseconds</param>
        </member>
        <member name="M:AMPS.Client.Client.getAckTimeout">
            <summary>
            Returns the queue ack timeout.
            </summary>
            <returns>the ack timeout in milliseconds</returns>
        </member>
        <member name="M:AMPS.Client.Client.flushAcks">
            <summary>
            Sends any pending queue ACKs to the server.
            </summary>
        </member>
        <member name="M:AMPS.Client.Client.executeAsync(AMPS.Client.Command,AMPS.Client.MessageHandler)">
            <summary>
              Execute the provided command on a background thread and provide
              messages received in response to the handler provided.
            
              This method creates a message based on the provided {@link Command},
              sends the message to AMPS, and invokes the provided
              {@link MessageHandler } to process messages returned in response
              to the command. AMPS sends the message and receives the results
              on a background thread. The MessageHandler runs on the background thread.
             </summary>
              <param name="command"> The Command object containing the command to send to AMPS</param>
              <param name="handler"> The MessageHandler to invoke to process messages received </param>
              <returns> the CommandId for the command</returns>
        </member>
        <member name="M:AMPS.Client.Client.executeAsync(AMPS.Client.Command,System.Action{AMPS.Client.Message})">
            <summary>
              Execute the provided command on a background thread and provide
              messages received in response to the handler provided.
            
              This method creates a message based on the provided {@link Command},
              sends the message to AMPS, and invokes the provided
              {@link Action } to process messages returned in response
              to the command. AMPS sends the message and receives the results
              on a background thread. The MessageHandler runs on the background thread.
             </summary>
              <param name="command"> The Command object containing the command to send to AMPS</param>
              <param name="action"> The Action to invoke to process messages received </param>
              <returns> the CommandId for the command</returns>
        </member>
        <member name="M:AMPS.Client.Client.execute(AMPS.Client.Command)">
             <summary>
             Execute the provided command and return messages received in response in a MessageStream.
            
             This method creates a message based on the provided Command,
             sends the message to AMPS, and receives the results. AMPS sends the
             message and receives the results on a background thread. That thread
             populates the MessageStream returned by this method.
             </summary>
            
             <param name="command">The Command object containing the command to send to AMPS</param>
             <returns>A MessageStream that provides message received in response to the command</returns>
        </member>
        <member name="M:AMPS.Client.Client.syncAckProcessing(AMPS.Client.CommandId,AMPS.Client.Message,System.Int64,System.UInt64,System.Boolean)">
            <summary>
            This is a helper function used to encapsulate the logic for waiting on a
            sent message so that async functions like subscribe and sowcan have an
            easier time using an exception interface for failed command execution.
            </summary>
            <param name="id">univerally unique id associated with the <paramref name="m"/></param>
            <param name="m"><typeparamref name="Message"/> to be sent</param>
            <param name="timeout">timeout in ms to wait for ack</param>
            <param name="haSeq">The HA sequence number of the command</param>
            <param name="isSubscribe">true if the command is an HA subscribe variant</param>
        </member>
        <member name="E:AMPS.Client.Client.ConnectionStateChanged">
            Represents the method to be called when the connection state
            for this client changes.
        </member>
        <member name="P:AMPS.Client.Client.AutoAck">
            <summary>
            The AutoAck property enables or disables auto-acking.
            When auto-acking is enabled any
            successful return from a message handler function will result in
            an ACK (sow_delete) message sent to the server. Any thrown
            exception will result in a "cancel" ACK sent to the server.
            </summary>
        </member>
        <member name="P:AMPS.Client.Client.AckBatchSize">
            <summary>
            The ACK batch size controls how many successful ACKs
            (which are sow_delete messages) are batched together before sending to the server.When
            combined with the "max_backlog" and MaxPerSubscriptionBacklog server configuration parameter,
            greater network efficiency can be achieved when using message queues.Setting this parameter
            causes calls to "ack" and successful auto-acks to be batched; unsuccessful/cancel acks
            are sent immediately.
            </summary>
        </member>
        <member name="T:AMPS.Client.Client.ConnectionStateChangedEventArgs">
            Provides data for the
            <see cref="E:AMPS.Client.Client.ConnectionStateChanged">ConnectionStateChanged</see> event.
        </member>
        <member name="M:AMPS.Client.Client.ConnectionStateChangedEventArgs.#ctor(AMPS.Client.Client.ConnectionStateChangedEventArgs.ConnectionState)">
            Initializes a new instance of the ConnectionStateChangedEventArgs
            class using the specified connection state.
        </member>
        <member name="P:AMPS.Client.Client.ConnectionStateChangedEventArgs.NewState">
            Property to hold the connection state for this event.
        </member>
        <member name="T:AMPS.Client.Client.ConnectionStateChangedEventArgs.ConnectionState">
            Constants to represent the state of a connection.
        </member>
        <member name="T:AMPS.Client.Client.Bookmarks">
            Functions that take a bookmark (String) such as
            bookmarkSubscribe() can be passed a literal bookmark ID,
            or one of these special values.
        </member>
        <member name="F:AMPS.Client.Client.Bookmarks.MOST_RECENT">
            Indicates that the most recent bookmark logged should be used.
        </member>
        <member name="F:AMPS.Client.Client.Bookmarks.EPOCH">
            Indicates that the subscription should begin at the beginning.
        </member>
        <member name="F:AMPS.Client.Client.Bookmarks.NOW">
            Indicates that the subscription should begin "now", without replay.
        </member>
        <member name="M:AMPS.Client.Client.ClientHandler.invoke(AMPS.Client.Transport,System.Exception)">
            <summary>The TransportDisconnectHandler implementation</summary>
            <param name="newTransport">New transport that will be opened during reconnect</param>
        </member>
        <member name="T:AMPS.Client.Client.ClientStoreReplayer">
            <summary>
            Implementation of <typeparamref name="StoreReplayer"/> to replay messages which were
            recorded as published, but did not receive an ack. This is performed as
            part of the logon function by default.
            </summary>
        </member>
        <member name="T:AMPS.Client.StoreReplayer">
            Replay the messages saved in a store. Provided to the
            <see cref="M:AMPS.Client.Store.replay(AMPS.Client.StoreReplayer)"/> or <see cref="M:AMPS.Client.Store.replaySingle(AMPS.Client.StoreReplayer,System.UInt64)"/> methods
            to replay stored operations. The StoreReplayer is responsible for
            publishing the operations to AMPS.
        </member>
        <member name="M:AMPS.Client.StoreReplayer.execute(AMPS.Client.Message)">
            Replay the specified message.
            <param name="message">the Message to replay</param>
        </member>
        <member name="T:AMPS.Client.FailedWriteHandler">
            <summary>
            An interface for receiving information on messages that you've written, but
            for which the server indicates are not persisted because of a failure.
            </summary>
        </member>
        <member name="M:AMPS.Client.FailedWriteHandler.failedWrite(AMPS.Client.Message,AMPS.Client.Message.Reasons)">
            <summary>
            The AMPS instance reports that a write has failed.
            </summary>
            <param name="message">The message that could not be written.</param>
            <param name="reason">A value from Message.Reasons indicating the reason for this failed write.</param>
        </member>
        <member name="M:AMPS.Client.HAClient.setReconnectDelay(System.Int32)">
            <summary>Sets the time delay between reconnection events.</summary>
            <param name="reconnectInterval">delay between reconnection events.</param>
             When called, this method creates and installs a new <typeparamref name="FixedDelayStrategy"/>
             in the client.
        </member>
        <member name="M:AMPS.Client.HAClient.setReconnectDelayStrategy(AMPS.Client.ReconnectDelayStrategy)">
            <summary>Sets the <typeparamref name="ReconnectDelayStrategy"/> for
                     this client, replacing any previous strategy.</summary>
            <param name="strategy_">the strategy to install in this client</param>
        </member>
        <member name="M:AMPS.Client.HAClient.setTimeout(System.Int32)">
            <summary>
            Sets the timeout for logon and re-subscribe sequence during a reconnection event.
            </summary>
            <param name="timeout_">logon and re-subscribe timeout</param>
        </member>
        <member name="M:AMPS.Client.HAClient.getTimeout">
            <summary>
            Gets the timeout for logon and re-subscribe sequence during a reconnection event.
            </summary>
            <returns>logon and re-subscribe timeout</returns>
        </member>
        <member name="M:AMPS.Client.HAClient.getServerChooser">
            <summary>
            Returns the current <typeparamref name="ServerChooser"/> for this client
            </summary>
            <returns></returns>
        </member>
        <member name="M:AMPS.Client.HAClient.setServerChooser(AMPS.Client.ServerChooser)">
            <summary>
            Sets the <typeparamref name="ServerChooser"/> for this client
            </summary>
            <param name="serverChooser_"><typeparamref name="ServerChooser"/> to set</param>
        </member>
        <member name="M:AMPS.Client.HAClient.#ctor(System.String)">
            <summary>
            Constructs a new "highly-available" <typeparamref name="HAClient"/>
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
        </member>
        <member name="M:AMPS.Client.HAClient.createMemoryBacked(System.String)">
            <summary>
            Creates a new memory-backed highly-available <typeparamref name="HAClient"/>. 
            This <typeparamref name="HAClient"/> will automatically reconnect and re-subscribe 
            in the event of a
            disconnect, and uses memory to ensure messages are not lost and duplicates 
            are processed appropriately.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <returns>A new memory backed <typeparamref name="HAClient"/> instance</returns>
        </member>
        <member name="M:AMPS.Client.HAClient.createFileBacked(System.String,System.String,System.String)">
            <summary>
            Creates a new "highly-available" <typeparamref name="HAClient"/> 
            backed by disk. This <typeparamref name="HAClient"/> will
            automatically reconnect and re-subscribe in the event of a disconnect.
            It uses disk to ensure messages are not lost and duplicates are 
            processed appropriately.
            </summary>
            <param name="name">A name to identify this client.
            This name is used for duplicate message detection and should be
            unique. AMPS does not enforce specific restrictions on the
            character set used, however some protocols (for example, XML) may
            not allow specific characters. 60East recommends that the client
            name be meaningful, short, human readable, and avoid using control
            characters, newline characters, or square brackets.</param>
            <param name="publishLog">File path to store the publisher log</param>
            <param name="subscribeLog">File path to the subscriber log</param>
        </member>
        <member name="M:AMPS.Client.HAClient.connectAndLogon">
            <summary>
            Connects to the next server chosen for us by our {@link ServerChooser}.
            Will continue attempting to connect and logon to each successive URI
            returned by the ServerChooser until the connection succeeds or the
            ServerChooser returns an empty URI.
            </summary>
            <exception cref="T:AMPS.Client.Exceptions.ConnectionException">Connection to AMPS instance failed</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.HAClient.getConnectionInfo" -->
        <member name="M:AMPS.Client.HybridPublishStore.setLowWatermark(System.Int32)">
            Sets the low watermark; once we start swapping out to disk, we 
            keep going until the number of entries in memory is lower than this.
            @param lowWatermark_ The number of entries to serve as a low watermark.
        </member>
        <member name="M:AMPS.Client.HybridPublishStore.getLastPersisted">
            Return the sequence of the last persisted message.
        </member>
        <member name="M:AMPS.Client.Message.isLeasePeriodNull">
            <summary>
            Returns true if the LeasePeriod field is null
            </summary>
        </member>
        <member name="M:AMPS.Client.Message.getLeasePeriod">
            <summary>
            Returns the value of the LeasePeriod field
            </summary>
        </member>
        <member name="M:AMPS.Client.Message.getLeasePeriodRaw">
            <summary>
            Returns the raw value of the LeasePeriod field
            </summary>
            <returns>A <see cref="T:AMPS.Client.Fields.StringField"/> pointing to the raw message's LeasePeriod.</returns>
        </member>
        <member name="M:AMPS.Client.Message.setBuffer(System.Byte[])">
             Sets the byte buffer used by the message. It's not common for
             applications to use this directly.
            
             @param buffer the byte buffer to use for the message.
        </member>
        <member name="M:AMPS.Client.Message.getBuffer">
             Gets the byte buffer used by the message.
            
             @return the raw byte buffer backing this message object.
        </member>
        <member name="M:AMPS.Client.Message.setRawBufferOffset(System.Int32)">
             Sets the offset into the byte buffer where this message begins.
            
             @param offset offset of first byte of message within the buffer.
        </member>
        <member name="M:AMPS.Client.Message.getRawBufferOffset">
             Gets the offset into the byte buffer where this message begins.
            
             @return offset of first byte of message within the buffer.
        </member>
        <member name="M:AMPS.Client.Message.setRawBufferLength(System.Int32)">
             Sets the length of the message within the byte buffer.
            
             @param length length of message within the buffer.
        </member>
        <member name="M:AMPS.Client.Message.getRawBufferLength">
             Gets the length of the message within the byte buffer.
            
             @return length of message within the buffer.
        </member>
        <member name="M:AMPS.Client.Message.getClient">
            <summary>
            Returns the Client who allocated this message.
            </summary>
            <returns>The <see cref="P:AMPS.Client.Message.Client"/>.</returns>
        </member>
        <member name="P:AMPS.Client.Message.LeasePeriod">
            <summary>
            Returns the value of the LeasePeriod field
            </summary>
        </member>
        <member name="P:AMPS.Client.Message.Client">
            <summary>
            The <see cref="P:AMPS.Client.Message.Client"/> who allocated this message.
            </summary>
        </member>
        <member name="M:AMPS.Client.MemoryBookmarkStore.#ctor(System.Int32)">
            <summary>
            Initialize self with a target number of subscriptions to store
            </summary>
            <param name="targetNumberOfSubscriptions">the number of subscriptions this store will need to track</param>
        </member>
        <member name="M:AMPS.Client.MemoryPublishStore.#ctor(System.Int32)">
            Creates a new MemoryPublishStore.
            <param name="initialCapacity">
                   The initial capacity (in 2k blocks) of the
                   store. This size is also used when resizing the store:
                   the store is resized by this value each time the store
                   grows. A general guideline for initial capacity is to
                   set the capacity to <b><i>messages_published_per_second</i> * int(<i>average_message_size</i> / <i>block_size</i>) + 1</b>. 
            </param>
        </member>
        <member name="T:AMPS.Client.ActionMessageHandler">
            <summary>
            Allows usage of an Action (i.e. a lambda function with no return value)
            in the place of a MessageHandler throughout the AMPS api.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.ActionMessageHandler.invoke(AMPS.Client.Message)" -->
        <member name="T:AMPS.Client.MessageRouter">
            MessageRouter is used to register and manage a list of handler objects for messages,
            and then to route messages to those handlers as messages arrive.
            MessageRouter also "knows" about the meaning of AMPS acks and can use them to automatically
            clean up routes as acks arrive.
        </member>
        <member name="M:AMPS.Client.MessageRouter.addRoute(AMPS.Client.CommandId,AMPS.Client.MessageHandler,AMPS.Client.Message.AckTypes,AMPS.Client.Message.AckTypes,System.Boolean)">
            Adds a route to self.
            @param commandId_ The command, query, or subid used for this route.
            @param messageHandler_ The message handler to route to
            @param requestedAcks_ The acks requested by the user for this command
            @param systemAcks_ The acks not requested by the end user, but requested by AMPS.
                               These will not be delivered to the message handler, but are
                               still processed for auto-removal.
            @param isSubscribe_ True if this route is for an ongoing subscription
        </member>
        <member name="M:AMPS.Client.MessageRouter.removeRoute(AMPS.Client.CommandId)">
            Remove a route from self.
            @param commandId_ The route to remove
            @return true if the route was removed.
        </member>
        <member name="M:AMPS.Client.MessageRouter.findRoute(AMPS.Client.CommandId)">
            Find and return a route
            @param commandId_ The command id for this route
            @return The MessageHandler registered for this route, or null if none is registered.
        </member>
        <member name="M:AMPS.Client.MessageRouter.clear">
            Removes all routes from self.
        </member>
        <member name="M:AMPS.Client.MessageRouter.deliverAck(AMPS.Client.Message,AMPS.Client.Message.AckTypes)">
            Deliver a message that is known already to be an Ack. Coordinates the
            removal of routes based on the ack received and the original message type.
            @param ackMessage_ The Message to deliver.
            @param ackType_ The ack type from that message.
            @return The number of message deliveries that occurred
            @throws Any exception from user message handlers.
        </member>
        <member name="M:AMPS.Client.MessageRouter.deliverData(AMPS.Client.Message)">
            Delivers a data message (not an Ack) to the registered route.
            Uses the commandID, subID, and queryID to deliver find a route and
            deliver to the first one found. This method is optimized for speed
            and does not attempt to examine ack types for removal of routes.
            @param dataMessage_ The non-ack message to deliver.
            @return The number of deliveries performed
            @throws Exception Any exception thrown by the user message handler.
        </member>
        <member name="M:AMPS.Client.MessageRouter.deliverData(AMPS.Client.Message,AMPS.Client.CommandId)">
            Delivers a data message using a specific command ID from the message. Optimized
            for speed and does not attempt to examine the message for auto-removal of routes
            @param dataMessage_ The message to deliver.
            @param commandId_ The command ID which will be used to lookup the delivery route
            @return The number of deliveries performed
            @throws Exception Any exception returned thrown by the message handler.
        </member>
        <member name="T:AMPS.Client.MessageStream">
            <summary>
            Allows iteration over the messages in an AMPS SOW cache, or over the stream of messages on a subscription, or both.
            </summary>
        </member>
        <member name="M:AMPS.Client.MessageStream.timeout(System.Int32)">
            <summary>
            Sets a timeout on this message stream. If no message is received with this timeout,
            forward iteration returns null for the next message.
            </summary>
            <param name="timeout_">The timeout value in milliseconds.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:AMPS.Client.MessageStream.conflate">
            <summary>
            Causes messages on a SOW topic to be conflated by their SOW key, so that when messages are consumed
            the latest value for each distinct key is returned instead of every message.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:AMPS.Client.MessageStream.maxDepth(System.Int32)">
            <summary>
            Bounds the internal queue of this stream to a specified count of messages.
            If the consumer of this stream does not process messages in a timely fashion and
            this internal queue limit is reached, the AMPS client will not respond to incoming 
            messages including acknowledgements and may become disconnected.
            </summary>
            <param name="maxQueueDepth_">The internal queue depth limit (default: unlimited)</param>
            <returns>This instance</returns>
        </member>
        <member name="M:AMPS.Client.MessageStream.Reset">
            
             This is a forward only, one time iterator and cannot be reset.
            
        </member>
        <member name="M:AMPS.Client.NVFIXBuilder.append(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends a tag and and value pair contained within a byte buffer to the NVFIX message.
            </summary>
            <param name="tag">The NVFIX tag to append</param>
            <param name="value">The byte buffer containing the NVFIX value to append</param>
            <param name="offset">The starting location of the value inside the byte buffer</param>
            <param name="length">The length of the value inside the byte buffer</param>
            <returns>A reference to this object</returns>
            <exception cref="T:AMPS.Client.Exceptions.CommandException">Thrown if tag cannot be converted to ISO-8859-1.</exception>
        </member>
        <member name="M:AMPS.Client.NVFIXBuilder.append(System.String,System.String)">
            <summary>
            Appends a tag and value pair to the NVFIX message.
            </summary>
            <param name="tag">the NVFIX tag to append</param>
            <param name="value">the NVFIX value for the tag to append. The value will be converted
            to an ISO-8859-1 byte array for writing.</param>
            <returns>a reference to this object.</returns>
            <exception cref="T:AMPS.Client.Exceptions.CommandException">If the tag or value argument is not convertible to ISO-8859-1</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AMPS.Client.Pool`1" -->
        <member name="M:AMPS.Client.Pool`1.#ctor(System.Int32)">
            Constructs a pool with the given size
            @param theClass The Class pooled. Should always be T.class. Sorry we can't do this ourselves.
            @param initialSize The initial size of the pool. If you pass a value less than 1, we'll just use 1.
        </member>
        <member name="M:AMPS.Client.Pool`1.get">
            Returns an object from the pool, growing self if necessary (by initialSize).
            If T cannot be instantiated, returns null.
            @return A pooled instance.
        </member>
        <member name="M:AMPS.Client.Pool`1.returnToPool(`0)">
            Return an object to the pool. Note, you're responsible for clear/reset of objects being returned.
            @param theInstance The T to return to the pool.
        </member>
        <member name="T:AMPS.Client.FailedWriteHandlerV4">
            <summary>
            An interface for receiving information on messages that you've written, but
            for which the server indicates are not persisted because of a failure.
            </summary>
        </member>
        <member name="M:AMPS.Client.FailedWriteHandlerV4.failedWrite(System.UInt64,AMPS.Client.Message.Commands,System.Byte[],System.Int64,System.Int64,System.Byte[],System.Int64,System.Int64,System.Byte[],System.Int64,System.Int64,AMPS.Client.Message.Reasons)">
            <summary>
            The AMPS instance reports that a write has failed.
            </summary>
            <param name="sequenceNumber">The sequence number of the message that could not be written.</param>
            <param name="operation">A value from Message.Commands (Publish, DeltaPublish, or SOWDelete).</param>
            <param name="topic">The topic of the message.</param>
            <param name="topicOffset">The index in topic where the topic bytes begin.</param>
            <param name="topicLength">The length of the topic, in bytes.</param>
            <param name="data">The data of the message.</param>
            <param name="dataOffset">The index in data where the data bytes begin.</param>
            <param name="dataLength">The length of the data, in bytes.</param>
            <param name="correlationId">The correlation ID for this message.</param>
            <param name="correlationIdOffset">The offset into the correlation ID array where the correlation ID begins.</param>
            <param name="correlationIdLength">The length of the correlation ID.</param>
            <param name="reason">A value from Message.Reasons indicating the reason for this failed write.</param>
        </member>
        <member name="M:AMPS.Client.CommandId.nextIdentifier">
            <summary>
            Creates and initializes a new, unique CommandId
            </summary>
            <returns>A new CommandId</returns>
        </member>
        <member name="M:AMPS.Client.CommandId.set(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Replaces the current id with the supplied identifier.
            </summary>
            <param name="buffer">A set of ASCII bytes corresponding to the Base64-encoded UUID.  This should always be 24 bytes long.</param>
            <param name="position">The position in <paramref name="buffer"/>buffer</param> where the UUID begins.
            <param name="length">The length of the UUID beginning at <paramref name="position"/>.  The behavior is undefined if this value is not 24.</param>
        </member>
        <member name="M:AMPS.Client.CommandId.ByteEquals(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Allows CommandId's equality semantics to be applied to two byte arrays.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.AlreadyConnectedException">
            <summary>
            Thrown when the Connect() method is called on a Client that is already in the connected state.
            Check your program for logic errors using connections that may already be connected, and call 
            disconnect on the Client to disconnect.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.BadFilterException">
            <summary>
            This exception is thrown when the content filter supplied has one or more errors.  Check the
            syntax of the content filter, and check the server logs for details.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.BadRegexTopicException">
            <summary>
            Thrown when the regular expression used in a subscription or query is invalid.
            Check the regular expression used in subscription, and check the server logs for more details.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.ConnectionRefusedException">
            <summary>
            Thrown when the attempt to connect to the AMPS server failed.  Verify that the server instance is running
            and that the server instance is configured to accept connections using the protocol and on the port
            specified.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.DisconnectedException">
            <summary>
            Thrown when an operation is attempted on a connection that is not connected.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.InvalidProtocolOptionsException">
            <summary>
            Thrown when invalid protocol options are present in the URI specification for the 
            connection.  Verify the contents of the URI are compatible with the configuration of the AMPS server.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.ProtocolException">
            <summary>
            Base class for exceptions thrown when an error occurs with a particular protocol specified.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.InvalidTransportOptionsException">
            <summary>
            Thrown when invalid transport options are present in the URI provided.
            Verify the URI with the AMPS administrator.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.TransportException">
            <summary>
            Base class for errors that occur in the transport layer of the client.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.InvalidURIException">
            <summary>
            Thrown when one or more errors are present in the URI.  Validate that the format
            of the URI matches that given in the documentation.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.ProtocolNotFoundException">
            <summary>
            Thrown when an attempt is made to use a message with a type that is not found.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.NotEntitledException">
            <summary>
            Thrown when AMPS indicates that an entitlement error has occured.
            The client is not entitled to the requested operation on this topic.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.RetryOperationException">
            <summary>
            Thrown when the operation has not completed successfuly, but may be reattempted.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.StreamException">
            <summary>
            Thrown when the contents of the data on the AMPS connection is incompatible with the client.
            This may be due to a low-level network error or an internal error inside AMPS -- contact AMPS support when encountered.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.TimedOutException">
            <summary>
            Thrown when a timeout occurs.  Use this exception to determine whether to re-attempt the operation,
            or simply present an error message.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.TransportTypeException">
            <summary>
            Thrown when a connection is attempted using an invalid transport type.
            </summary>
        </member>
        <member name="T:AMPS.Client.Exceptions.UnknownException">
            <summary>
            Thrown when an unexpected error occurs.  Contact AMPS support for assistance.
            </summary>
        </member>
        <member name="F:AMPS.Client.Fields.ReasonField.reasonStrings">
            NOTE THESE MUST MATCH the order in the Message.Reasons enum.
        </member>
        <member name="T:AMPS.Client.URIProperties">
            <summary>
            Provides a properties interface to the parameters passed in a URI.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AMPS.Client.ReconnectDelayStrategy" -->
        <member name="M:AMPS.Client.ReconnectDelayStrategy.getConnectWaitDuration(System.String)">
             <summary>
             Returns the time (in milliseconds) that the client should wait before
             connecting to the given server URI.
             </summary>
            
             <param name="uri_">
             The URI to which the client plans to connect.
             </param>
            
             <exception cref="T:System.Exception">
             Any exception thrown indicates no connection should be attempted.
             The client, in essence, should "give up."
             </exception>
        </member>
        <member name="M:AMPS.Client.ReconnectDelayStrategy.reset">
            <summary>
            Reset the state of this reconnect delay. AMPS calls this method when
            a connection is successfully established.
            </summary>
        </member>
        <member name="T:AMPS.Client.FixedDelayStrategy">
            <summary>
            FixedDelayStrategy is an implementation that delays for a fixed time
            period, as specified in the constructor, when reconnecting to the same
            server as we were previously connected to, or if we are invoked again
            for the first server we ever tried.
            </summary>
        </member>
        <member name="F:AMPS.Client.FixedDelayStrategy.DEFAULT_DELAY">
            <summary>
            The default delay when reconnecting to a server, in milliseconds.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AMPS.Client.FixedDelayStrategy.#ctor(System.Int32,System.Int32)" -->
        <member name="T:AMPS.Client.FixedDelayStrategy.MaximumRetryExceeded">
            <summary>
            A specialized exception type thrown by FixedDelayStrategy
            to indicate that the client should "give up" on attempting to
            reconnect to a server.
            </summary>
        </member>
        <member name="T:AMPS.Client.ExponentialDelayStrategy">
            <summary>
            ExponentialDelayStrategy is an implementation that exponentially
            "backs off" when reconnecting to the same server, with a maximum
            number of retries before it gives up entirely.
            </summary>
        </member>
        <member name="F:AMPS.Client.ExponentialDelayStrategy.DEFAULT_DELAY">
            <summary>
            The default time (in milliseconds) to wait before reconnecting to a
            server for the first time after a failed connection.
            </summary>
        </member>
        <member name="F:AMPS.Client.ExponentialDelayStrategy.DEFAULT_MAXIMUM_DELAY">
            <summary>
            The default maximum time to wait between any reconnection attempts.
            Exponential backoff will not exceed this maximum.
            </summary>
        </member>
        <member name="F:AMPS.Client.ExponentialDelayStrategy.DEFAULT_BACKOFF_EXPONENT">
            <summary>
            The default exponent to use for calculating the next delay time. For
            example if the initial time is 200ms and the exponent is 2.0, the next
            delay will be 400ms, then 800ms, etc.
            </summary>
        </member>
        <member name="F:AMPS.Client.ExponentialDelayStrategy.DEFAULT_MAXIMUM_RETRY_TIME">
            <summary>
            The default time (in millseconds) to allow reconnect attempts to
            continue without a successful connection, before "giving up" and
            abandoning the connection attempt. 0 means never give up.
            </summary>
        </member>
        <member name="F:AMPS.Client.ExponentialDelayStrategy.DEFAULT_JITTER">
            <summary>
            The amount of 'jitter' to apply when calculating a delay time,
            measured in multiples of the initial delay. Jitter is used to reduce
            the number of simultaneous reconnects that may be issued from
            multiple clients.
            </summary>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy.#ctor">
            <summary>
            Constructs an ExponentialDelayStrategy, the default strategy for
            HAClient. Use setters to adjust the various parameters on self.
            </summary>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy.setInitialDelay(System.Int32)">
            <summary>
            Sets the time (in milliseconds) to wait before reconnecting to
            a server for the first time after a failed connection.
            </summary>
            <returns>self</returns>
            <param name="initialDelay_">The new initial delay value, 
                                        in milliseconds.</param>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy.setMaximumDelay(System.Int32)">
            <summary>
            Sets the maximum time to wait between any reconnection attempts.
            Exponential backoff will not exceed this maximum.
            </summary>
            <returns>self</returns>
            <param name="maximumDelay_">The new maximum delay value, 
                                        in milliseconds.</param>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy.setBackoffExponent(System.Double)">
            <summary>
            Sets the exponent to use for calculating the next delay time. For
            example if the initial time is 200ms and the exponent is 2.0, the next
            delay will be 400ms, then 800ms, etc.
            </summary>
            <returns>self</returns>
            <param name="exponent_">The new exponent value.</param>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy.setMaximumRetryTime(System.Int32)">
            <summary>
            Sets the time (in millseconds) to allow reconnect attempts to
            continue without a successful connection, before "giving up" and
            abandoning the connection attempt. 0 means never give up.
            </summary>
            <returns>self</returns>
            <param name="maximumRetryTime_">The new maximum retry time,
                                            in milliseconds.</param>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy.setJitter(System.Double)">
            <summary>
            Sets the jitter factor used to add randomness to the delay time.
            Jitter is represented as a multiple of the initial delay time;
            a random number from [0, (JITTER * INITIAL_DELAY) ) is added 
            to nonzero time delays.
            </summary>
            <returns>self</returns>
            <param name="jitter_">The jitter factor, in multiples of 
                                  the initial delay.</param>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy._throwIfMaximumExceeded">
            <summary>
            An internal function used to check if the configured retry has been
            exceeded, and if so, throw MaximumRetryExceeded to cause the calling
            HAClient to give up on reconnecting to a server.
            </summary>
        </member>
        <member name="M:AMPS.Client.ExponentialDelayStrategy._currentDurationAndIncrease">
            <summary>
            Returns the _currentDelay, and also expands _currentDelay based
            on the configured exponent and maximum.
            </summary>
            <returns>The delay that should be used, prior to 
                     increasing it.</returns>
        </member>
        <member name="T:AMPS.Client.ExponentialDelayStrategy.MaximumRetryExceeded">
            <summary>
            A specialized exception type thrown by ExponentialDelayStrategy
            to indicate that the client should "give up" on attempting to
            reconnect to a server.
            </summary>
        </member>
    </members>
</doc>
