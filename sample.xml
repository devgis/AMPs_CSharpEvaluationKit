<?xml version="1.0" encoding="UTF-8"?>
<AMPSConfig>
  <!-- The name of AMPS instance -->
  <Name>AMPS</Name>

  <!-- Configure the admin/stats HTTP server -->
  <Admin>
    <!-- To view AMPS monitoring information,
         use http://localhost:8085/amps -->
    <InetAddr>localhost:8085</InetAddr>
  </Admin>

  <RequiredMinimumVersion>5.0</RequiredMinimumVersion>

  <MessageTypes>
    <MessageType>
     <Name>composite-json-binary</Name>
     <Module>composite-local</Module>
     <MessageType>json</MessageType>
     <MessageType>binary</MessageType>
    </MessageType>
  </MessageTypes>


  <Transports>
    <!-- fix messages using TCP -->
    <Transport>
      <Name>fix-tcp</Name>
      <Type>tcp</Type>
      <InetAddr>9004</InetAddr>
      <ReuseAddr>true</ReuseAddr>
      <MessageType>fix</MessageType>
      <Protocol>fix</Protocol>
    </Transport>

    <!-- nvfix messages using TCP -->
    <Transport>
      <Name>nvfix-tcp</Name>
      <Type>tcp</Type>
      <InetAddr>9005</InetAddr>
      <ReuseAddr>true</ReuseAddr>
      <MessageType>nvfix</MessageType>
      <Protocol>fix</Protocol>
    </Transport>

    <!-- xml messages using TCP -->
    <Transport>
      <Name>soap-tcp</Name>
      <Type>tcp</Type>
      <InetAddr>9006</InetAddr>
      <ReuseAddr>true</ReuseAddr>
      <MessageType>xml</MessageType>
      <Protocol>xml</Protocol>
    </Transport>

    <!-- json messages using TCP -->
    <Transport>
      <Name>json-tcp</Name>
      <Type>tcp</Type>
      <InetAddr>9007</InetAddr>
      <ReuseAddr>true</ReuseAddr>
      <MessageType>json</MessageType>
      <Protocol>amps</Protocol>
    </Transport>

    <!-- composite json/binary messages -->
    <Transport>
      <Name>composite-json-binary-tcp</Name>
      <Type>tcp</Type>
      <InetAddr>9017</InetAddr>
      <MessageType>composite-json-binary</MessageType>
      <Protocol>amps</Protocol>
    </Transport>

    <!-- transport that accepts all message types -->
    <Transport>
      <Name>amps-any-type-tcp</Name>
      <Type>tcp</Type>
      <InetAddr>9027</InetAddr>
      <Protocol>amps</Protocol>
    </Transport>

  </Transports>

  <Logging>
    <Target>
      <Protocol>file</Protocol>
      <FileName>./logs/%Y%m%d%H%M%S-%n.log</FileName>
      <!-- rotate the log file at 2GB of uncompressed log messages -->
      <RotationThreshold>2G</RotationThreshold>
      <!-- log all messages at 'trace' level and above -->
      <Level>trace</Level>
    </Target>

    <!-- log everything at or above 'error' to stdout -->
    <Target>
      <Protocol>stdout</Protocol>
      <Level>error</Level>
      <IncludeErrors>00-0015</IncludeErrors>
    </Target>
  </Logging>

  <!-- Topic definitions -->

  <SOW>

    <!-- Create a topic section for each topic that will maintain a
         State of the World database -->

   <Topic>
	<!-- SOW database file name, relative to the directory
             where AMPS is started. -->
	<FileName>./sow/%n.sow</FileName>

        <!-- Topic name. There are no special naming
	     requirements for SOW topics. -->

	<Topic>messages-sow</Topic>
	<MessageType>json</MessageType>

	<!-- Specify the key that AMPS will use to tell messages apart.
             AMPS will store each unique message, as indicated by a
	     unique key value. The first message with a key value is
	     an INSERT into the SOW. Further messages with the same
	     key UPDATE the contents of the message. --> 
	<Key>/messageNumber</Key>
        <!-- Specify an expiration. This sets the expiration to four hours. -->
        <Expiration>4h</Expiration>
    </Topic>

    <!-- Topic definition for the topics used in the eval kit. -->

    <Topic>
	<!-- SOW database file name, relative to the directory
             where AMPS is started. -->
	<FileName>./sow/%n.sow</FileName>
        <!-- Topic name. There are no special naming
	     requirements for SOW topics. -->
	<Topic>messages-sow</Topic>
	<MessageType>xml</MessageType>

	<!-- Specify the key that AMPS will use to tell messages apart.
             AMPS will store each unique message, as indicated by a
	     unique key value. The first message with a key value is
	     an INSERT into the SOW. Further messages with the same
	     key UPDATE the contents of the message. --> 
	<Key>/hi/messageNumber</Key>
        <!-- Specify an expiration. This sets the expiration to four hours. -->
        <Expiration>4h</Expiration>
    </Topic>

    <Topic>
	<!-- SOW database file name, relative to the directory
             where AMPS is started. -->
	<FileName>./sow/%n.sow</FileName>
        <!-- Topic name. There are no special naming
	     requirements for SOW topics. -->
	<Topic>messages-sow</Topic>
	<MessageType>nvfix</MessageType>

	<!-- Specify the key that AMPS will use to tell messages apart.
             AMPS will store each unique message, as indicated by a
	     unique key value. The first message with a key value is
	     an INSERT into the SOW. Further messages with the same
	     key UPDATE the contents of the message. --> 
	<Key>/messageNumber</Key>
        <!-- Specify an expiration. This sets the expiration to four hours. -->
        <Expiration>4h</Expiration>
    </Topic>


    <!-- Define a message queue. -->

      <Queue>
          <!-- Specify the name and message type of the queue topic --> 
          <Topic>sample-queue</Topic>
          <MessageType>json</MessageType>
          <!-- Set the delivery semantics of the queue. This queue will
               guarantee that a message is delivered and processed at least
               once: to enforce this guarantee, a program receiving
               messages from the queue must acknowledge that the message has
               been received and processed. --> 
          <Semantics>at-least-once</Semantics>
 
          <!-- Set the source topic for messages in the the queue.
               Queues receive their messages from an underlying topic defined
               in the transaction log (or, if the UnderlyingTopic is a
               regular expression, for all topics that match the regular
               topics matching a regular expression).
               If an UnderlyingTopic isn't specified, the topic name
               of the queue is used as a default.
          -->
          <UnderlyingTopic>sample-queue-source</UnderlyingTopic>

          <!-- Specify the delivery fairness model. In this case, deliver
               messages to each subscriber to the queue in turn. -->
          <FairnessModel>round-robin</FairnessModel>
      </Queue>

      <!-- Define a view to use for sample evaluation. -->
      <Topic>
         <Name>orders</Name>
         <MessageType>json</MessageType>
         <FileName>./sow/%n.sow</FileName>
         <Key>/orderId</Key>
         <Key>/customer</Key>
         <Key>/quantity</Key>
         <Key>/price</Key>
      </Topic>
      <View>
         <Name>customer-order-totals</Name>
         <UnderlyingTopic>orders</UnderlyingTopic>
         <MessageType>json</MessageType>
         <Projection>
           <Field>SUM(/quantity * /price) AS /total</Field>
           <Field>/customer AS /customer</Field>
        </Projection> 
        <Grouping>
           <Field>/customer</Field>
        </Grouping>
      </View>
         
  </SOW>

  <!-- Create a transaction log to enable historical replay on the
       messages-history topic and record the underlying topic for
       the message queue. -->
  <TransactionLog>
    <JournalDirectory>./journal</JournalDirectory>
    <PreallocatedJournalFiles>1</PreallocatedJournalFiles>
    <MinJournalSize>10MB</MinJournalSize>
    <Topic>
       <Name>messages-history</Name>
       <MessageType>nvfix</MessageType>
    </Topic>
    <Topic>
       <Name>messages-history</Name>
       <MessageType>json</MessageType>
    </Topic>
    <Topic>
       <Name>sample-queue-source</Name>
       <MessageType>json</MessageType>
    </Topic>
    <FlushInterval>100ms</FlushInterval>
  </TransactionLog>

</AMPSConfig>

